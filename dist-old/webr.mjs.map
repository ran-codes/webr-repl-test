{
  "version": 3,
  "sources": ["../src/node_modules/@msgpack/msgpack/src/utils/int.ts", "../src/node_modules/@msgpack/msgpack/src/utils/utf8.ts", "../src/node_modules/@msgpack/msgpack/src/ExtData.ts", "../src/node_modules/@msgpack/msgpack/src/DecodeError.ts", "../src/node_modules/@msgpack/msgpack/src/timestamp.ts", "../src/node_modules/@msgpack/msgpack/src/ExtensionCodec.ts", "../src/node_modules/@msgpack/msgpack/src/utils/typedArrays.ts", "../src/node_modules/@msgpack/msgpack/src/Encoder.ts", "../src/node_modules/@msgpack/msgpack/src/encode.ts", "../src/node_modules/@msgpack/msgpack/src/utils/prettyByte.ts", "../src/node_modules/@msgpack/msgpack/src/CachedKeyDecoder.ts", "../src/node_modules/@msgpack/msgpack/src/Decoder.ts", "../src/node_modules/@msgpack/msgpack/src/decode.ts", "../src/node_modules/@msgpack/msgpack/src/utils/stream.ts", "../src/node_modules/@msgpack/msgpack/src/decodeAsync.ts", "../src/node_modules/@msgpack/msgpack/src/index.ts", "../src/webR/error.ts", "../src/webR/compat.ts", "../src/webR/robj.ts", "../src/webR/emscripten.ts", "../src/webR/utils-r.ts", "../src/webR/chan/task-common.ts", "../src/webR/robj-worker.ts", "../src/webR/utils.ts", "../src/webR/chan/task-main.ts", "../src/webR/chan/queue.ts", "../src/webR/chan/message.ts", "../src/webR/payload.ts", "../src/webR/chan/channel.ts", "../src/webR/chan/task-worker.ts", "../src/webR/chan/channel-shared.ts", "../src/webR/chan/channel-service.ts", "../src/webR/chan/channel-postmessage.ts", "../src/webR/chan/channel-common.ts", "../src/webR/config.ts", "../src/webR/robj-main.ts", "../src/webR/proxy.ts", "../src/webR/console.ts", "../src/webR/webr-main.ts"],
  "sourcesContent": ["// Integer Utility\n\nexport const UINT32_MAX = 0xffff_ffff;\n\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number): number {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number): number {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n", "/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nimport { UINT32_MAX } from \"./int\";\n\nconst TEXT_ENCODING_AVAILABLE =\n  (typeof process === \"undefined\" || process?.env?.[\"TEXT_ENCODING\"] !== \"never\") &&\n  typeof TextEncoder !== \"undefined\" &&\n  typeof TextDecoder !== \"undefined\";\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_ENCODING\"] !== \"force\"\n  ? 200\n  : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE = sharedTextEncoder?.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++]!;\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      const byte4 = bytes[offset++]! & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_DECODER\"] !== \"force\"\n  ? 200\n  : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  return sharedTextDecoder!.decode(stringBytes);\n}\n", "/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n", "export class DecodeError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    // fix the prototype chain in a cross-platform way\n    const proto: typeof DecodeError.prototype = Object.create(DecodeError.prototype);\n    Object.setPrototypeOf(this, proto);\n\n    Object.defineProperty(this, \"name\", {\n      configurable: true,\n      enumerable: false,\n      value: DecodeError.name,\n    });\n  }\n}\n", "// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError\";\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n", "// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interface to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n", "export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer): Uint8Array {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n", "import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType = undefined> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  public encodeSharedRef(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n", "import { Encoder } from \"./Encoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type EncodeOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * The maximum depth in nested objects and arrays.\n     *\n     * Defaults to 100.\n     */\n    maxDepth: number;\n\n    /**\n     * The initial size of the internal buffer.\n     *\n     * Defaults to 2048.\n     */\n    initialBufferSize: number;\n\n    /**\n     * If `true`, the keys of an object is sorted. In other words, the encoded\n     * binary is canonical and thus comparable to another encoded binary.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    sortKeys: boolean;\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     *\n     * Defaults to `false`.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point numbers,\n     * with the `forceFloat32` option taken into account.\n     *\n     * Defaults to `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst defaultEncodeOptions: EncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType = undefined>(\n  value: unknown,\n  options: EncodeOptions<SplitUndefined<ContextType>> = defaultEncodeOptions as any,\n): Uint8Array {\n  const encoder = new Encoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n    options.ignoreUndefined,\n    options.forceIntegerToFloat,\n  );\n  return encoder.encodeSharedRef(value);\n}\n", "export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\n", "import { utf8DecodeJs } from \"./utils/utf8\";\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport interface KeyDecoder {\n  canBeCached(byteLength: number): boolean;\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\n}\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly str: string;\n}\n\nexport class CachedKeyDecoder implements KeyDecoder {\n  hit = 0;\n  miss = 0;\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH, readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\n    // avoid `new Array(N)`, which makes a sparse array,\n    // because a sparse array is typically slower than a non-sparse array.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number): boolean {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private find(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1]!;\n\n    FIND_CHUNK: for (const record of records) {\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.str;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1]!;\n    const record: KeyCacheRecord = { bytes, str: value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to an arbitrary position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.find(bytes, inputOffset, byteLength);\n    if (cachedValue != null) {\n      this.hit++;\n      return cachedValue;\n    }\n    this.miss++;\n\n    const str = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, str);\n    return str;\n  }\n}\n", "import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\nimport { DecodeError } from \"./DecodeError\";\n\nconst enum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  const keyType = typeof key;\n\n  return keyType === \"string\" || keyType === \"number\";\n};\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e: any) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType = undefined> {\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack: Array<StackState> = [];\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxStrLength = UINT32_MAX,\n    private readonly maxBinLength = UINT32_MAX,\n    private readonly maxArrayLength = UINT32_MAX,\n    private readonly maxMapLength = UINT32_MAX,\n    private readonly maxExtLength = UINT32_MAX,\n    private readonly keyDecoder: KeyDecoder | null = sharedCachedKeyDecoder,\n  ) {}\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.stack.length = 0;\n\n    // view, bytes, and pos will be re-initialized in setBuffer()\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | BufferSource): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number> | BufferSource) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n      this.setBuffer(buffer);\n    } else {\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n\n      // concat remainingData + newData\n      const newBuffer = new Uint8Array(remainingData.length + newData.length);\n      newBuffer.set(remainingData);\n      newBuffer.set(newData, remainingData.length);\n      this.setBuffer(newBuffer);\n    }\n  }\n\n  private hasRemaining(size: number) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createExtraByteError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  /**\n   * @throws {@link DecodeError}\n   * @throws {@link RangeError}\n   */\n  public decode(buffer: ArrayLike<number> | BufferSource): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    const object = this.doDecodeSync();\n    if (this.hasRemaining(1)) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  }\n\n  public *decodeMulti(buffer: ArrayLike<number> | BufferSource): Generator<unknown, void, unknown> {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    while (this.hasRemaining(1)) {\n      yield this.doDecodeSync();\n    }\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining(1)) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(\n    stream: AsyncIterable<ArrayLike<number> | BufferSource>,\n  ): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number> | BufferSource>): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1]!;\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new DecodeError(\"The type of key must be string or number but \" + typeof object);\n          }\n          if (object === \"__proto__\") {\n            throw new DecodeError(\"The key __proto__ is not allowed\");\n          }\n\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new DecodeError(\n        `Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`,\n      );\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else if (byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack[this.stack.length - 1]!;\n      return state.type === State.MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n", "import { Decoder } from \"./Decoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type DecodeOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Maximum string length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decode(buffer);\n}\n\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Generator<unknown, void, unknown> {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeMulti(buffer);\n}\n", "// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterable<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n", "import { Decoder } from \"./Decoder\";\nimport { ensureAsyncIterable } from \"./utils/stream\";\nimport { defaultDecodeOptions } from \"./decode\";\nimport type { ReadableStreamLike } from \"./utils/stream\";\nimport type { DecodeOptions } from \"./decode\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export async function decodeAsync<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeAsync(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMultiStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\nexport function decodeStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  return decodeMultiStream(streamLike, options);\n}\n", "// Main Functions:\n\nimport { encode } from \"./encode\";\nexport { encode };\nimport type { EncodeOptions } from \"./encode\";\nexport type { EncodeOptions };\n\nimport { decode, decodeMulti } from \"./decode\";\nexport { decode, decodeMulti };\nimport type { DecodeOptions } from \"./decode\";\nexport { DecodeOptions };\n\nimport { decodeAsync, decodeArrayStream, decodeMultiStream, decodeStream } from \"./decodeAsync\";\nexport { decodeAsync, decodeArrayStream, decodeMultiStream, decodeStream };\n\nimport { Decoder, DataViewIndexOutOfBoundsError } from \"./Decoder\";\nimport { DecodeError } from \"./DecodeError\";\nexport { Decoder, DecodeError, DataViewIndexOutOfBoundsError };\n\nimport { Encoder } from \"./Encoder\";\nexport { Encoder };\n\n// Utilitiies for Extension Types:\n\nimport { ExtensionCodec } from \"./ExtensionCodec\";\nexport { ExtensionCodec };\nimport type { ExtensionCodecType, ExtensionDecoderType, ExtensionEncoderType } from \"./ExtensionCodec\";\nexport type { ExtensionCodecType, ExtensionDecoderType, ExtensionEncoderType };\nimport { ExtData } from \"./ExtData\";\nexport { ExtData };\n\nimport {\n  EXT_TIMESTAMP,\n  encodeDateToTimeSpec,\n  encodeTimeSpecToTimestamp,\n  decodeTimestampToTimeSpec,\n  encodeTimestampExtension,\n  decodeTimestampExtension,\n} from \"./timestamp\";\nexport {\n  EXT_TIMESTAMP,\n  encodeDateToTimeSpec,\n  encodeTimeSpecToTimestamp,\n  decodeTimestampToTimeSpec,\n  encodeTimestampExtension,\n  decodeTimestampExtension,\n};\n", "/**\r\n * Custom Error classes that shall be raised by webR.\r\n * @module Error\r\n */\r\n\r\n/**\r\n * A general error raised by webR.\r\n */\r\nexport class WebRError extends Error {\r\n  constructor(msg: string) {\r\n    super(msg);\r\n    this.name = this.constructor.name;\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n\r\n/**\r\n * Exceptions raised on the webR worker thread that have been forwarded to the\r\n * main thread through the communication channel.\r\n */\r\nexport class WebRWorkerError extends WebRError { }\r\n\r\n/**\r\n * Exceptions related to issues with the webR communication channel.\r\n */\r\nexport class WebRChannelError extends WebRError { }\r\n\r\n/**\r\n * Exceptions related to issues with webR object payloads.\r\n */\r\nexport class WebRPayloadError extends WebRError { }\r\n", "import { WebRError } from './error';\r\n\r\ninterface Process {\r\n  browser: string | undefined;\r\n  release: { [key: string]: string };\r\n}\r\ndeclare let process: Process;\r\n\r\nexport const IN_NODE =\r\n  typeof process !== 'undefined' &&\r\n  process.release &&\r\n  process.release.name === 'node';\r\n\r\n// Adapted from https://github.com/pyodide/pyodide/blob/main/src/js/compat.ts\r\nexport let loadScript: (url: string) => Promise<void>;\r\nif (globalThis.document) {\r\n  loadScript = (url) =>\r\n    new Promise((resolve, reject) => {\r\n      const script = document.createElement('script');\r\n      script.src = url;\r\n      script.onload = () => resolve();\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n    });\r\n} else if (globalThis.importScripts) {\r\n  loadScript = async (url) => {\r\n    try {\r\n      globalThis.importScripts(url);\r\n    } catch (e) {\r\n      if (e instanceof TypeError) {\r\n        await import(url);\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n  };\r\n} else if (IN_NODE) {\r\n  loadScript = async (url: string) => {\r\n    const nodePathMod = (await import('path')).default;\r\n    await import(nodePathMod.resolve(url));\r\n  };\r\n} else {\r\n  throw new WebRError('Cannot determine runtime environment');\r\n}\r\n", "/**\r\n * Common module for working with R objects.\r\n * @module RObject\r\n */\r\nimport * as RMain from './robj-main';\r\nimport * as RWorker from './robj-worker';\r\n\r\nexport type RPtr = number;\r\n\r\nexport const RTypeMap = {\r\n  null: 0,\r\n  symbol: 1,\r\n  pairlist: 2,\r\n  closure: 3,\r\n  environment: 4,\r\n  promise: 5,\r\n  call: 6,\r\n  special: 7,\r\n  builtin: 8,\r\n  string: 9,\r\n  logical: 10,\r\n  integer: 13,\r\n  double: 14,\r\n  complex: 15,\r\n  character: 16,\r\n  dots: 17,\r\n  any: 18,\r\n  list: 19,\r\n  expression: 20,\r\n  bytecode: 21,\r\n  pointer: 22,\r\n  weakref: 23,\r\n  raw: 24,\r\n  s4: 25,\r\n  new: 30,\r\n  free: 31,\r\n  function: 99,\r\n} as const;\r\nexport type RType = keyof typeof RTypeMap;\r\nexport type RTypeNumber = typeof RTypeMap[RType];\r\n\r\n/** @internal */\r\nexport type RCtor = 'object' | 'dataframe';\r\n\r\nexport type Complex = {\r\n  re: number;\r\n  im: number;\r\n};\r\n\r\nexport type WebRDataRaw =\r\n  | number\r\n  | string\r\n  | boolean\r\n  | undefined\r\n  | null\r\n  | void\r\n  | Complex\r\n  | Error\r\n  | ArrayBuffer\r\n  | ArrayBufferView\r\n  | ImageBitmap\r\n  | Array<WebRDataRaw>\r\n  | Map<WebRDataRaw, WebRDataRaw>\r\n  | Set<WebRDataRaw>\r\n  | { [key: string]: WebRDataRaw };\r\n\r\nexport type NamedEntries<T> = [string | null, T][];\r\nexport type NamedObject<T> = { [key: string]: T };\r\n\r\n/**\r\n * A union of JavaScript types that are able to be converted into an R object.\r\n *\r\n * `WebRData` is used both as a general input argument for R object construction\r\n * and also as a general return type when converting R objects into JavaScript.\r\n *\r\n */\r\nexport type WebRData =\r\n  | RMain.RObject\r\n  | RWorker.RObjectBase\r\n  | RWorker.RObject\r\n  | WebRDataRaw\r\n  | WebRDataJs\r\n  | WebRData[]\r\n  | ArrayBuffer\r\n  | ArrayBufferView\r\n  | { [key: string]: WebRData };\r\n\r\n/**\r\n * A subset of {@link WebRData} for JavaScript objects that can be converted\r\n * into R atomic vectors.\r\n * @typeParam T The JavaScript scalar type associated with the atomic vector.\r\n */\r\nexport type WebRDataAtomic<T> =\r\n  | WebRDataScalar<T>\r\n  | WebRDataJsAtomic<T>\r\n  | NamedObject<T | null>\r\n  | ([T] extends [number] ? ArrayBuffer | ArrayBufferView | (number | null)[] : (T | null)[]);\r\n\r\n/**\r\n * `WebRDataJs` objects form a tree structure, used when serialising R objects\r\n * into a JavaScript representation.\r\n *\r\n * Nested R objects are serialised using the {@link WebRDataJsNode} type,\r\n * forming branches in the resulting tree structure, with leaves formed by the\r\n * remaining types.\r\n */\r\nexport type WebRDataJs =\r\n  | WebRDataJsNull\r\n  | WebRDataJsString\r\n  | WebRDataJsSymbol\r\n  | WebRDataJsNode\r\n  | WebRDataJsAtomic<RWorker.atomicType>;\r\n\r\nexport type WebRDataJsNull = {\r\n  type: 'null';\r\n};\r\n\r\nexport type WebRDataJsString = {\r\n  type: 'string';\r\n  value: string;\r\n};\r\n\r\nexport type WebRDataJsSymbol = {\r\n  type: 'symbol';\r\n  printname: string | null;\r\n  symvalue: RPtr | null;\r\n  internal: RPtr | null;\r\n};\r\n\r\nexport type WebRDataJsNode = {\r\n  type: 'list' | 'pairlist' | 'environment';\r\n  names: (string | null)[] | null;\r\n  values: (WebRDataRaw | RWorker.RObject | RMain.RObject | WebRDataJs)[];\r\n};\r\n\r\nexport type WebRDataJsAtomic<T> = {\r\n  type: 'logical' | 'integer' | 'double' | 'complex' | 'character' | 'raw';\r\n  names: (string | null)[] | null;\r\n  values: (T | null)[];\r\n};\r\n\r\n/**\r\n * Test for a {@link WebRDataJs} instance.\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of a {@link WebRDataJs}.\r\n */\r\nexport function isWebRDataJs(value: any): value is WebRDataJs {\r\n  return !!value && typeof value === 'object'\r\n    && Object.keys(RTypeMap).includes(value.type as string);\r\n}\r\n\r\n/**\r\n * A subset of WebRData for scalar JavaScript objects.\r\n */\r\nexport type WebRDataScalar<T> = T | RMain.RObject | RWorker.RObjectBase;\r\n\r\n/**\r\n * Test if an object is of type {@link Complex}.\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is of type {@link Complex}.\r\n */\r\nexport function isComplex(value: any): value is Complex {\r\n  return !!value && typeof value === 'object' && 're' in value && 'im' in value;\r\n}\r\n", "import type { RPtr, RTypeNumber } from './robj';\r\nimport type { RObject, RList } from './robj-worker';\r\nimport type { EvalROptions } from './webr-chan';\r\nimport type { UnwindProtectException } from './utils-r';\r\nimport type { ChannelWorker } from './chan/channel';\r\nimport type { FSMountOptions } from './webr-main';\r\n\r\nexport interface Module extends EmscriptenModule {\r\n  /* Add mkdirTree to FS namespace, missing from @types/emscripten at the\r\n   * time of writing.\r\n   */\r\n  FS: typeof FS & {\r\n    _mount: typeof FS.mount;\r\n    mkdirTree(path: string): void;\r\n    filesystems: {\r\n      [key: string]: Emscripten.FileSystemType;\r\n    }\r\n  };\r\n  ENV: { [key: string]: string };\r\n  GOT: {\r\n    [key: string]: { required: boolean; value: number };\r\n  }\r\n  createLazyFilesystem: () => void;\r\n  monitorRunDependencies: (n: number) => void;\r\n  noImageDecoding: boolean;\r\n  noAudioDecoding: boolean;\r\n  noWasmDecoding: boolean;\r\n  downloadFileContent: (\r\n    URL: string,\r\n    headers?: Array<string>\r\n  ) => {\r\n    status: number;\r\n    response: string | ArrayBuffer;\r\n  };\r\n  mountImageUrl: (url: string, mountpoint: string) => void;\r\n  mountImagePath: (path: string, mountpoint: string) => void;\r\n  mountDriveFS: (mountpoint: string, options: FSMountOptions<'DRIVEFS'>) => void;\r\n  // Exported Emscripten JS API\r\n  allocateUTF8: typeof allocateUTF8;\r\n  allocateUTF8OnStack: typeof allocateUTF8OnStack;\r\n  getValue: typeof getValue;\r\n  setValue: typeof setValue;\r\n  UTF8ToString: typeof UTF8ToString;\r\n  callMain: (args: string[]) => void;\r\n  getWasmTableEntry: (entry: number) => (...args: any[]) => RPtr;\r\n  // R symbols from Rinternals.h\r\n  _ATTRIB: (ptr: RPtr) => RPtr;\r\n  _CAR: (ptr: RPtr) => RPtr;\r\n  _CDR: (ptr: RPtr) => RPtr;\r\n  _CLOENV: (ptr: RPtr) => RPtr;\r\n  _COMPLEX: (ptr: RPtr) => RPtr;\r\n  _FRAME: (ptr: RPtr) => RPtr;\r\n  _INTEGER: (ptr: RPtr) => RPtr;\r\n  _INTERNAL: (ptr: RPtr) => RPtr;\r\n  _LENGTH: (ptr: RPtr) => number;\r\n  _LOGICAL: (ptr: RPtr) => RPtr;\r\n  _PRINTNAME: (ptr: RPtr) => RPtr;\r\n  _R_CHAR: (ptr: RPtr) => RPtr;\r\n  _RAW: (ptr: RPtr) => RPtr;\r\n  _REAL: (ptr: RPtr) => RPtr;\r\n  _SETCAR: (x: RPtr, y: RPtr) => void;\r\n  _STRING_ELT: (ptr: RPtr, idx: number) => RPtr;\r\n  _STRING_PTR: (ptr: RPtr) => RPtr;\r\n  _SYMVALUE: (ptr: RPtr) => RPtr;\r\n  _TAG: (ptr: RPtr) => RPtr;\r\n  _TYPEOF: (ptr: RPtr) => RPtr;\r\n  _VECTOR_ELT: (ptr: RPtr, idx: number) => RPtr;\r\n  _R_lsInternal3: (env: RPtr, all: number, sorted: number) => RPtr;\r\n  _R_MakeExternalPtr: (p: number, tag: RPtr, prot: RPtr) => RPtr;\r\n  _R_NewEnv: (enclos: RPtr, hash: number, size: number) => RPtr;\r\n  _R_ParseEvalString: (code: number, env: RPtr) => RPtr;\r\n  _R_PreserveObject: (ptr: RPtr) => void;\r\n  _R_ReleaseObject: (ptr: RPtr) => void;\r\n  _R_ReplDLLinit: () => void;\r\n  _R_ReplDLLdo1: () => number;\r\n  _Rf_ScalarReal: (n: number) => RPtr;\r\n  _Rf_ScalarLogical: (l: number) => RPtr;\r\n  _Rf_ScalarInteger: (n: number) => RPtr;\r\n  _Rf_ScalarString: (s: string) => RPtr;\r\n  _Rf_allocList: (len: number) => RPtr;\r\n  _Rf_allocVector: (type: RTypeNumber, len: number) => RPtr;\r\n  _Rf_defineVar: (symbol: RPtr, value: RPtr, env: RPtr) => void;\r\n  _Rf_error: (msg: EmPtr) => void;\r\n  _Rf_eval: (call: RPtr, env: RPtr) => RPtr;\r\n  _Rf_findVarInFrame: (rho: RPtr, symbol: RPtr) => RPtr;\r\n  _Rf_listAppend: (source: RPtr, target: RPtr) => RPtr;\r\n  _Rf_getAttrib: (ptr1: RPtr, ptr2: RPtr) => RPtr;\r\n  _Rf_initialize_R: (argc: number, argv: RPtr) => void;\r\n  _Rf_install: (ptr: number) => RPtr;\r\n  _Rf_installTrChar: (name: RPtr) => RPtr;\r\n  _Rf_lang1: (ptr1: RPtr) => RPtr;\r\n  _Rf_lang2: (ptr1: RPtr, ptr2: RPtr) => RPtr;\r\n  _Rf_lang3: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr) => RPtr;\r\n  _Rf_lang4: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr) => RPtr;\r\n  _Rf_lang5: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr, ptr5: RPtr) => RPtr;\r\n  _Rf_lang6: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr, ptr5: RPtr, ptr6: RPtr) => RPtr;\r\n  _Rf_mkChar: (string: number) => RPtr;\r\n  _Rf_mkCharCE: (string: number, encoding: number) => RPtr;\r\n  _Rf_mkString: (ptr: number) => RPtr;\r\n  _Rf_onintr: () => void;\r\n  _Rf_protect: (ptr: RPtr) => RPtr;\r\n  _Rf_translateCharUTF8: (ptr: RPtr) => RPtr;\r\n  _R_ContinueUnwind: (cont: RPtr) => never;\r\n  _R_ProtectWithIndex: (ptr1: RPtr, ptr2: RPtr) => void;\r\n  _R_Reprotect: (ptr1: RPtr, ptr2: RPtr) => void;\r\n  _Rf_setAttrib: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr) => RPtr;\r\n  _Rf_unprotect: (n: number) => void;\r\n  _Rf_unprotect_ptr: (ptr: RPtr) => void;\r\n  _DLLbuf: RPtr;\r\n  _DLLbufp: RPtr;\r\n  _R_BaseEnv: RPtr;\r\n  _R_BracketSymbol: RPtr;\r\n  _R_Bracket2Symbol: RPtr;\r\n  _R_DollarSymbol: RPtr;\r\n  _R_EmptyEnv: RPtr;\r\n  _R_FalseValue: RPtr;\r\n  _R_GlobalEnv: RPtr;\r\n  _R_Interactive: RPtr;\r\n  _R_NaInt: RPtr;\r\n  _R_NaReal: RPtr;\r\n  _R_NaString: RPtr;\r\n  _R_LogicalNAValue: RPtr;\r\n  _R_NilValue: RPtr;\r\n  _R_TrueValue: RPtr;\r\n  _R_NamesSymbol: RPtr;\r\n  _R_UnboundValue: RPtr;\r\n  _SET_STRING_ELT: (ptr: RPtr, idx: number, val: RPtr) => void;\r\n  _SET_VECTOR_ELT: (ptr: RPtr, idx: number, val: RPtr) => void;\r\n  _setup_Rmainloop: () => void;\r\n  _strcpy: (dest: RPtr, src: RPtr) => number;\r\n  _vmaxget: () => number;\r\n  _vmaxset: (ptr: number) => void;\r\n  // TODO: Namespace all webR properties\r\n  webr: {\r\n    UnwindProtectException: typeof UnwindProtectException;\r\n    channel: ChannelWorker | undefined,\r\n    canvas: {\r\n      [key: number]: {\r\n        ctx: OffscreenCanvasRenderingContext2D;\r\n        offscreen: OffscreenCanvas;\r\n        transmit: boolean;\r\n      };\r\n    };\r\n    readConsole: () => number;\r\n    setPrompt: (prompt: string) => void;\r\n    resolveInit: () => void;\r\n    handleEvents: () => void;\r\n    dataViewer: (data: RPtr, title: string) => void;\r\n    evalJs: (code: RPtr) => unknown;\r\n    evalR: (expr: string | RObject, options?: EvalROptions) => RObject;\r\n    captureR: (expr: string | RObject, options: EvalROptions) => {\r\n      result: RObject,\r\n      output: RList,\r\n      images: ImageBitmap[],\r\n    };\r\n    setTimeoutWasm: (ptr: EmPtr, data: EmPtr, delay: number) => void;\r\n  };\r\n}\r\n\r\nexport const Module = {} as Module;\r\n\r\nexport type EmPtr = ReturnType<typeof Module.allocateUTF8>;\r\n\r\nexport interface DictEmPtrs {\r\n  [key: string]: EmPtr;\r\n}\r\n\r\nexport function dictEmFree(dict: { [key: string | number]: EmPtr }) {\r\n  Object.keys(dict).forEach((key) => Module._free(dict[key]));\r\n}\r\n", "import { Module, DictEmPtrs, dictEmFree } from './emscripten';\r\nimport { WebRData, RPtr } from './robj';\r\nimport { RObject, REnvironment, RHandle, handlePtr } from './robj-worker';\r\n\r\nexport function protect<T extends RHandle>(x: T): T {\r\n  Module._Rf_protect(handlePtr(x));\r\n  return x;\r\n}\r\n\r\nexport function protectInc<T extends RHandle>(x: T, prot: { n: number }): T {\r\n  Module._Rf_protect(handlePtr(x));\r\n  ++prot.n;\r\n  return x;\r\n}\r\n\r\nexport function protectWithIndex(x: RHandle): { loc: number; ptr: RPtr } {\r\n  // Integer size hardcoded to 4 bytes. This is fine but is there a\r\n  // way to call sizeof?\r\n  const pLoc = Module._malloc(4);\r\n\r\n  Module._R_ProtectWithIndex(handlePtr(x), pLoc);\r\n  const loc = Module.getValue(pLoc, 'i32');\r\n\r\n  return { loc: loc, ptr: pLoc };\r\n}\r\n\r\nexport function unprotectIndex(index: { ptr: RPtr }): void {\r\n  Module._Rf_unprotect(1);\r\n  Module._free(index.ptr);\r\n}\r\n\r\nexport function reprotect<T extends RHandle>(x: T, index: { loc: number; ptr: RPtr }): T {\r\n  Module._R_Reprotect(handlePtr(x), index.loc);\r\n  return x;\r\n}\r\n\r\nexport function unprotect(n: number) {\r\n  Module._Rf_unprotect(n);\r\n}\r\n\r\n// rlang convention: `env`-prefixed functions consistently take `env`\r\n// as first argument\r\nexport function envPoke(env: RHandle, sym: RHandle, value: RHandle) {\r\n  Module._Rf_defineVar(handlePtr(sym), handlePtr(value), handlePtr(env));\r\n}\r\n\r\nexport function parseEvalBare(code: string, env: WebRData): RObject {\r\n  const strings: DictEmPtrs = {};\r\n  const prot = { n: 0 };\r\n\r\n  try {\r\n    const envObj = new REnvironment(env);\r\n    protectInc(envObj, prot);\r\n\r\n    strings.code = Module.allocateUTF8(code);\r\n\r\n    const out = Module._R_ParseEvalString(strings.code, envObj.ptr);\r\n    return RObject.wrap(out);\r\n  } finally {\r\n    dictEmFree(strings);\r\n    unprotect(prot.n);\r\n  }\r\n}\r\n\r\nexport class UnwindProtectException extends Error {\r\n  cont: RPtr;\r\n  constructor(message: string, cont: RPtr) {\r\n    super(message);\r\n    this.name = 'UnwindProtectException';\r\n    this.cont = cont;\r\n  }\r\n}\r\n\r\nexport function safeEval(call: RHandle, env: RHandle): RPtr {\r\n  return Module.getWasmTableEntry(Module.GOT.ffi_safe_eval.value)(\r\n    handlePtr(call),\r\n    handlePtr(env)\r\n  );\r\n}\r\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\r\n\r\nexport const SZ_BUF_DOESNT_FIT = 0;\r\nexport const SZ_BUF_FITS_IDX = 1;\r\nexport const SZ_BUF_SIZE_IDX = 0;\r\n\r\nexport interface Endpoint extends EventSource {\r\n  postMessage(message: any, transfer?: Transferable[]): void;\r\n  start?: () => void;\r\n}\r\n\r\nexport interface EventSource {\r\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: object): void;\r\n\r\n  removeEventListener(\r\n    type: string,\r\n    listener: EventListenerOrEventListenerObject,\r\n    options?: object,\r\n  ): void;\r\n}\r\n\r\nexport function toWireValue(value: any): [any, Transferable[]] {\r\n  return [value, transferCache.get(value) || []];\r\n}\r\n\r\nconst transferCache = new WeakMap<any, Transferable[]>();\r\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\r\n  transferCache.set(obj, transfers);\r\n  return obj;\r\n}\r\n\r\nexport type UUID = string;\r\n\r\nexport function isUUID(x: any): x is UUID {\r\n  return typeof x === 'string' && x.length === UUID_LENGTH;\r\n}\r\n\r\nexport const UUID_LENGTH = 63;\r\n\r\nexport function generateUUID(): UUID {\r\n  const result = Array.from({ length: 4 }, randomSegment).join('-');\r\n  if (result.length !== UUID_LENGTH) {\r\n    throw new Error('comlink internal error: UUID has the wrong length');\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction randomSegment() {\r\n  let result = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16);\r\n  const pad = 15 - result.length;\r\n  if (pad > 0) {\r\n    result = Array.from({ length: pad }, () => 0).join('') + result;\r\n  }\r\n  return result;\r\n}\r\n", "/**\r\n * Module for working with R objects on the worker thead.\r\n * @module RWorker\r\n */\r\nimport { Module } from './emscripten';\r\nimport { Complex, isComplex, NamedEntries, NamedObject, WebRDataRaw, WebRDataScalar } from './robj';\r\nimport { WebRData, WebRDataAtomic, RPtr, RType, RTypeMap, RTypeNumber, RCtor } from './robj';\r\nimport { isWebRDataJs, WebRDataJs, WebRDataJsAtomic, WebRDataJsNode } from './robj';\r\nimport { WebRDataJsNull, WebRDataJsString, WebRDataJsSymbol } from './robj';\r\nimport { isSimpleObject } from './utils';\r\nimport { envPoke, parseEvalBare, protect, protectInc, unprotect } from './utils-r';\r\nimport { protectWithIndex, reprotect, unprotectIndex, safeEval } from './utils-r';\r\nimport { EvalROptions, ShelterID, isShelterID } from './webr-chan';\r\n\r\nexport type RHandle = RObject | RPtr;\r\n\r\nexport function handlePtr(x: RHandle): RPtr {\r\n  if (isRObject(x)) {\r\n    return x.ptr;\r\n  } else {\r\n    return x;\r\n  }\r\n}\r\n\r\n// Throw if an R object does not match a certain R type\r\nfunction assertRType(obj: RObjectBase, type: RType) {\r\n  if (Module._TYPEOF(obj.ptr) !== RTypeMap[type]) {\r\n    throw new Error(`Unexpected object type \"${obj.type()}\" when expecting type \"${type}\"`);\r\n  }\r\n}\r\n\r\n// TODO: Shelter should be a dictionary not an array\r\nexport const shelters = new Map<ShelterID, RPtr[]>();\r\n\r\n// Use this for implicit protection of objects sent to the main\r\n// thread. Currently uses the precious list but could use a different\r\n// mechanism in the future. Unprotection is explicit through\r\n// `Shelter.destroy()`.\r\nexport function keep(shelter: ShelterID, x: RHandle) {\r\n  const ptr = handlePtr(x);\r\n  Module._R_PreserveObject(ptr);\r\n\r\n  // TODO: Remove when shelter transition is complete\r\n  if (shelter === undefined) {\r\n    return;\r\n  }\r\n\r\n  if (isShelterID(shelter)) {\r\n    shelters.get(shelter)!.push(ptr);\r\n    return;\r\n  }\r\n\r\n  throw new Error('Unexpected shelter type ' + typeof shelter);\r\n}\r\n\r\n// Frees objects preserved with `keep()`. This method is called by\r\n// users in the main thread to release objects that were automatically\r\n// protected before being sent away.\r\nexport function destroy(shelter: ShelterID, x: RHandle) {\r\n  const ptr = handlePtr(x);\r\n  Module._R_ReleaseObject(ptr);\r\n\r\n  const objs: RPtr[] = shelters.get(shelter)!;\r\n  const loc = objs.indexOf(ptr);\r\n\r\n  if (loc < 0) {\r\n    throw new Error(\"Can't find object in shelter.\");\r\n  }\r\n\r\n  objs.splice(loc, 1);\r\n}\r\n\r\nexport function purge(shelter: ShelterID) {\r\n  const ptrs: RPtr[] = shelters.get(shelter)!;\r\n\r\n  for (const ptr of ptrs) {\r\n    try {\r\n      Module._R_ReleaseObject(ptr);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  shelters.set(shelter, []);\r\n}\r\n\r\nexport interface ToJsOptions {\r\n  depth: number;\r\n}\r\n\r\nexport type Nullable<T> = T | RNull;\r\n\r\nfunction newObjectFromData(obj: WebRData): RObject {\r\n  // Conversion of WebRDataJs type JS objects\r\n  if (isWebRDataJs(obj)) {\r\n    return new (getRWorkerClass(obj.type))(obj);\r\n  }\r\n\r\n  // Map JS's 'undefined' type to R's NULL object\r\n  if (typeof obj == 'undefined') {\r\n    return new RNull();\r\n  }\r\n\r\n  // Conversion of explicit R NULL value\r\n  if (obj && typeof obj === 'object' && 'type' in obj && obj.type === 'null') {\r\n    return new RNull();\r\n  }\r\n\r\n  // Direct conversion of scalar JS values\r\n  if (obj === null) {\r\n    return new RLogical({ type: 'logical', names: null, values: [null] });\r\n  }\r\n  if (typeof obj === 'boolean') {\r\n    return new RLogical(obj);\r\n  }\r\n  if (typeof obj === 'number') {\r\n    return new RDouble(obj);\r\n  }\r\n  if (typeof obj === 'string') {\r\n    return new RCharacter(obj);\r\n  }\r\n  if (isComplex(obj)) {\r\n    return new RComplex(obj);\r\n  }\r\n\r\n  // Conversion of composite JS objects\r\n  if (ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer) {\r\n    return new RRaw(obj);\r\n  }\r\n  if (Array.isArray(obj)) {\r\n    return newObjectFromArray(obj);\r\n  }\r\n  // Any other JS object shape is reserved for creating an R `data.frame`\r\n  if (typeof obj === 'object') {\r\n    return RDataFrame.fromObject(obj);\r\n  }\r\n\r\n  throw new Error('R object construction for this JS object is not yet supported.');\r\n}\r\n\r\nfunction newObjectFromArray(arr: WebRData[]): RObject {\r\n  const prot = { n: 0 };\r\n\r\n  // Is this a D3 formatted data frame?\r\n  const hasObjects = arr.every((v) => v && typeof v === 'object' && !isRObject(v) && !isComplex(v));\r\n  if (hasObjects) {\r\n    const _arr = arr as { [key: string]: WebRData }[];\r\n    const isConsistent = _arr.every((a) => {\r\n      return Object.keys(a).filter((k) => !Object.keys(_arr[0]).includes(k)).length === 0 &&\r\n        Object.keys(_arr[0]).filter((k) => !Object.keys(a).includes(k)).length === 0;\r\n    });\r\n    const isAtomic = _arr.every((a) => Object.values(a).every((v) => {\r\n      return isAtomicType(v) || isRVectorAtomic(v);\r\n    }));\r\n    if (isConsistent && isAtomic) {\r\n      return RDataFrame.fromD3(_arr);\r\n    }\r\n  }\r\n\r\n  // Not D3 formatted - Can we shortcut and convert directly?\r\n  if (arr.every((v) => typeof v === 'boolean' || v === null)) {\r\n    return new RLogical(arr as (boolean | null)[]);\r\n  }\r\n  if (arr.every((v) => typeof v === 'number' || v === null)) {\r\n    return new RDouble(arr as (number | null)[]);\r\n  }\r\n  if (arr.every((v) => typeof v === 'string' || v === null)) {\r\n    return new RCharacter(arr as (string | null)[]);\r\n  }\r\n\r\n  // Not D3 & mixed types: use R's built in object coercion with c() so as to\r\n  // match R's built in coercion rules\r\n  try {\r\n    const call = new RCall([new RSymbol('c'), ...arr]);\r\n    protectInc(call, prot);\r\n    return call.eval();\r\n  } finally {\r\n    unprotect(prot.n);\r\n  }\r\n}\r\n\r\nexport class RObjectBase {\r\n  ptr: RPtr;\r\n  constructor(ptr: RPtr) {\r\n    this.ptr = ptr;\r\n  }\r\n\r\n  type(): RType {\r\n    const typeNumber = Module._TYPEOF(this.ptr) as RTypeNumber;\r\n    const type = Object.keys(RTypeMap).find(\r\n      (typeName) => RTypeMap[typeName as RType] === typeNumber\r\n    );\r\n    return type as RType;\r\n  }\r\n}\r\n\r\nexport class RObject extends RObjectBase {\r\n  constructor(data: WebRData) {\r\n    if (!(data instanceof RObjectBase)) {\r\n      return newObjectFromData(data);\r\n    }\r\n\r\n    super(data.ptr);\r\n  }\r\n\r\n  static wrap<T extends typeof RObject>(this: T, ptr: RPtr): InstanceType<T> {\r\n    const typeNumber = Module._TYPEOF(ptr) as RTypeNumber;\r\n    const type = Object.keys(RTypeMap)[Object.values(RTypeMap).indexOf(typeNumber)];\r\n    return new (getRWorkerClass(type as RType))(new RObjectBase(ptr)) as InstanceType<T>;\r\n  }\r\n\r\n  get [Symbol.toStringTag](): string {\r\n    return `RObject:${this.type()}`;\r\n  }\r\n\r\n  /** @internal */\r\n  static getPersistentObject(prop: keyof typeof objs): unknown {\r\n    return objs[prop];\r\n  }\r\n\r\n  /** @internal */\r\n  getPropertyValue(prop: keyof this): unknown {\r\n    return this[prop];\r\n  }\r\n\r\n  inspect(): void {\r\n    parseEvalBare('.Internal(inspect(x))', { x: this });\r\n  }\r\n\r\n  isNull(): this is RNull {\r\n    return Module._TYPEOF(this.ptr) === RTypeMap.null;\r\n  }\r\n\r\n  isNa(): boolean {\r\n    try {\r\n      const result = parseEvalBare('is.na(x)', { x: this }) as RLogical;\r\n      protect(result);\r\n      return result.toBoolean();\r\n    } finally {\r\n      unprotect(1);\r\n    }\r\n  }\r\n\r\n  isUnbound(): boolean {\r\n    return this.ptr === objs.unboundValue.ptr;\r\n  }\r\n\r\n  attrs(): Nullable<RPairlist> {\r\n    return RPairlist.wrap(Module._ATTRIB(this.ptr));\r\n  }\r\n\r\n  class(): RCharacter {\r\n    const prot = { n: 0 };\r\n    const classCall = new RCall([new RSymbol('class'), this]);\r\n    protectInc(classCall, prot);\r\n    try {\r\n      return classCall.eval() as RCharacter;\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  setNames(values: (string | null)[] | null): this {\r\n    let namesObj: RObject;\r\n\r\n    if (values === null) {\r\n      namesObj = objs.null;\r\n    } else if (Array.isArray(values) && values.every((v) => typeof v === 'string' || v === null)) {\r\n      namesObj = new RCharacter(values);\r\n    } else {\r\n      throw new Error('Argument to setNames must be null or an Array of strings or null');\r\n    }\r\n\r\n    // `setAttrib()` protects its inputs\r\n    Module._Rf_setAttrib(this.ptr, objs.namesSymbol.ptr, namesObj.ptr);\r\n    return this;\r\n  }\r\n\r\n  names(): (string | null)[] | null {\r\n    const names = RCharacter.wrap(Module._Rf_getAttrib(this.ptr, objs.namesSymbol.ptr));\r\n    if (names.isNull()) {\r\n      return null;\r\n    } else {\r\n      return names.toArray();\r\n    }\r\n  }\r\n\r\n  includes(name: string) {\r\n    const names = this.names();\r\n    return names && names.includes(name);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  toJs(options: ToJsOptions = { depth: 0 }, depth = 1): WebRDataJs {\r\n    throw new Error('This R object cannot be converted to JS');\r\n  }\r\n\r\n  subset(prop: number | string): RObject {\r\n    return this.#slice(prop, objs.bracketSymbol.ptr);\r\n  }\r\n\r\n  get(prop: number | string): RObject {\r\n    return this.#slice(prop, objs.bracket2Symbol.ptr);\r\n  }\r\n\r\n  getDollar(prop: string): RObject {\r\n    return this.#slice(prop, objs.dollarSymbol.ptr);\r\n  }\r\n\r\n  #slice(prop: number | string, op: RPtr): RObject {\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const idx = new RObject(prop);\r\n      protectInc(idx, prot);\r\n\r\n      const call = Module._Rf_lang3(op, this.ptr, idx.ptr);\r\n      protectInc(call, prot);\r\n\r\n      return RObject.wrap(safeEval(call, objs.baseEnv));\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  pluck(...path: (string | number)[]): RObject | undefined {\r\n    const index = protectWithIndex(objs.null);\r\n\r\n    try {\r\n      const getter = (obj: RObject, prop: string | number): RObject => {\r\n        const out = obj.get(prop);\r\n        return reprotect(out, index);\r\n      };\r\n      const result = path.reduce(getter, this);\r\n\r\n      return result.isNull() ? undefined : result;\r\n    } finally {\r\n      unprotectIndex(index);\r\n    }\r\n  }\r\n\r\n  set(prop: string | number, value: RObject | WebRDataRaw): RObject {\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const idx = new RObject(prop);\r\n      protectInc(idx, prot);\r\n\r\n      const valueObj = new RObject(value);\r\n      protectInc(valueObj, prot);\r\n\r\n      const assign = new RSymbol('[[<-');\r\n      const call = Module._Rf_lang4(assign.ptr, this.ptr, idx.ptr, valueObj.ptr);\r\n      protectInc(call, prot);\r\n\r\n      return RObject.wrap(safeEval(call, objs.baseEnv));\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static getMethods(obj: RObject) {\r\n    const props = new Set<string>();\r\n    let cur: unknown = obj;\r\n    do {\r\n      Object.getOwnPropertyNames(cur).map((p) => props.add(p));\r\n    } while ((cur = Object.getPrototypeOf(cur)));\r\n    return [...props.keys()].filter((i) => typeof obj[i as keyof typeof obj] === 'function');\r\n  }\r\n}\r\n\r\nexport class RNull extends RObject {\r\n  constructor() {\r\n    super(new RObjectBase(Module.getValue(Module._R_NilValue, '*')));\r\n    return this;\r\n  }\r\n\r\n  toJs(): WebRDataJsNull {\r\n    return { type: 'null' };\r\n  }\r\n}\r\n\r\nexport class RSymbol extends RObject {\r\n  // Note that symbols don't need to be protected. This also means\r\n  // that allocating symbols in loops with random data is probably a\r\n  // bad idea because this leaks memory.\r\n  constructor(x: WebRDataScalar<string>) {\r\n    if (x instanceof RObjectBase) {\r\n      assertRType(x, 'symbol');\r\n      super(x);\r\n      return;\r\n    }\r\n    const name = Module.allocateUTF8(x as string);\r\n    try {\r\n      super(new RObjectBase(Module._Rf_install(name)));\r\n    } finally {\r\n      Module._free(name);\r\n    }\r\n  }\r\n\r\n  toJs(): WebRDataJsSymbol {\r\n    const obj = this.toObject();\r\n    return {\r\n      type: 'symbol',\r\n      printname: obj.printname,\r\n      symvalue: obj.symvalue,\r\n      internal: obj.internal,\r\n    };\r\n  }\r\n\r\n  toObject(): {\r\n    printname: string | null;\r\n    symvalue: RPtr | null;\r\n    internal: RPtr | null;\r\n  } {\r\n    return {\r\n      printname: this.printname().isUnbound() ? null : this.printname().toString(),\r\n      symvalue: this.symvalue().isUnbound() ? null : this.symvalue().ptr,\r\n      internal: this.internal().isNull() ? null : this.internal().ptr,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return this.printname().toString();\r\n  }\r\n\r\n  printname(): RString {\r\n    return RString.wrap(Module._PRINTNAME(this.ptr));\r\n  }\r\n  symvalue(): RObject {\r\n    return RObject.wrap(Module._SYMVALUE(this.ptr));\r\n  }\r\n  internal(): RObject {\r\n    return RObject.wrap(Module._INTERNAL(this.ptr));\r\n  }\r\n}\r\n\r\nexport class RPairlist extends RObject {\r\n  constructor(val: WebRData) {\r\n    if (val instanceof RObjectBase) {\r\n      assertRType(val, 'pairlist');\r\n      super(val);\r\n      return this;\r\n    }\r\n\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const { names, values } = toWebRData(val);\r\n\r\n      const list = RPairlist.wrap(Module._Rf_allocList(values.length));\r\n      protectInc(list, prot);\r\n\r\n      for (\r\n        let [i, next] = [0, list as Nullable<RPairlist>];\r\n        !next.isNull();\r\n        [i, next] = [i + 1, next.cdr()]\r\n      ) {\r\n        next.setcar(new RObject(values[i]));\r\n      }\r\n\r\n      list.setNames(names);\r\n      super(list);\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  get length(): number {\r\n    return this.toArray().length;\r\n  }\r\n\r\n  toArray(options: ToJsOptions = { depth: 1 }): WebRData[] {\r\n    return this.toJs(options).values;\r\n  }\r\n\r\n  toObject({\r\n    allowDuplicateKey = true,\r\n    allowEmptyKey = false,\r\n    depth = -1,\r\n  } = {}): NamedObject<WebRData> {\r\n    const entries = this.entries({ depth });\r\n    const keys = entries.map(([k,]) => k);\r\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\r\n      throw new Error('Duplicate key when converting pairlist without allowDuplicateKey enabled');\r\n    }\r\n    if (!allowEmptyKey && keys.some((k) => !k)) {\r\n      throw new Error('Empty or null key when converting pairlist without allowEmptyKey enabled');\r\n    }\r\n    return Object.fromEntries(\r\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\r\n    ) as NamedObject<WebRData>;\r\n  }\r\n\r\n  entries(options: ToJsOptions = { depth: 1 }): NamedEntries<WebRData> {\r\n    const obj = this.toJs(options);\r\n    return obj.values.map((v, i) => [obj.names ? obj.names[i] : null, v]);\r\n  }\r\n\r\n  toJs(options: ToJsOptions = { depth: 0 }, depth = 1): WebRDataJsNode {\r\n    const namesArray: string[] = [];\r\n    let hasNames = false;\r\n    const values: WebRDataJsNode['values'] = [];\r\n\r\n    for (let next = this as Nullable<RPairlist>; !next.isNull(); next = next.cdr()) {\r\n      const symbol = next.tag();\r\n      if (symbol.isNull()) {\r\n        namesArray.push('');\r\n      } else {\r\n        hasNames = true;\r\n        namesArray.push(symbol.toString());\r\n      }\r\n      if (options.depth && depth >= options.depth) {\r\n        values.push(next.car());\r\n      } else {\r\n        values.push(next.car().toJs(options, depth + 1));\r\n      }\r\n    }\r\n    const names = hasNames ? namesArray : null;\r\n    return { type: 'pairlist', names, values };\r\n  }\r\n\r\n  includes(name: string): boolean {\r\n    return name in this.toObject();\r\n  }\r\n\r\n  setcar(obj: RObject): void {\r\n    Module._SETCAR(this.ptr, obj.ptr);\r\n  }\r\n\r\n  car(): RObject {\r\n    return RObject.wrap(Module._CAR(this.ptr));\r\n  }\r\n\r\n  cdr(): Nullable<RPairlist> {\r\n    return RObject.wrap(Module._CDR(this.ptr)) as Nullable<RPairlist>;\r\n  }\r\n\r\n  tag(): Nullable<RSymbol> {\r\n    return RObject.wrap(Module._TAG(this.ptr)) as Nullable<RSymbol>;\r\n  }\r\n}\r\n\r\nexport class RCall extends RObject {\r\n  constructor(val: WebRData) {\r\n    if (val instanceof RObjectBase) {\r\n      assertRType(val, 'call');\r\n      super(val);\r\n      return this;\r\n    }\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const { values } = toWebRData(val);\r\n      const objs = values.map((value) => protectInc(new RObject(value), prot));\r\n      const call = RCall.wrap(Module._Rf_allocVector(RTypeMap.call, values.length));\r\n      protectInc(call, prot);\r\n\r\n      for (\r\n        let [i, next] = [0, call as Nullable<RPairlist>];\r\n        !next.isNull();\r\n        [i, next] = [i + 1, next.cdr()]\r\n      ) {\r\n        next.setcar(objs[i]);\r\n      }\r\n      super(call);\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  setcar(obj: RObject): void {\r\n    Module._SETCAR(this.ptr, obj.ptr);\r\n  }\r\n\r\n  car(): RObject {\r\n    return RObject.wrap(Module._CAR(this.ptr));\r\n  }\r\n\r\n  cdr(): Nullable<RPairlist> {\r\n    return RObject.wrap(Module._CDR(this.ptr)) as Nullable<RPairlist>;\r\n  }\r\n\r\n  eval(): RObject {\r\n    return Module.webr.evalR(this, { env: objs.baseEnv });\r\n  }\r\n\r\n  capture(options: EvalROptions = {}) {\r\n    return Module.webr.captureR(this, options);\r\n  }\r\n\r\n  deparse(): string {\r\n    const prot = { n: 0 };\r\n    try {\r\n      const call = Module._Rf_lang2(\r\n        new RSymbol('deparse1').ptr,\r\n        Module._Rf_lang2(new RSymbol('quote').ptr, this.ptr)\r\n      );\r\n      protectInc(call, prot);\r\n\r\n      const val = RCharacter.wrap(safeEval(call, objs.baseEnv));\r\n      protectInc(val, prot);\r\n\r\n      return val.toString();\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n}\r\n\r\nexport class RList extends RObject {\r\n  constructor(val: WebRData, names: (string | null)[] | null = null) {\r\n    if (val instanceof RObjectBase) {\r\n      assertRType(val, 'list');\r\n      super(val);\r\n      if (names) {\r\n        if (names.length !== this.length) {\r\n          throw new Error(\r\n            \"Can't construct named `RList`. Supplied `names` must be the same length as the list.\"\r\n          );\r\n        }\r\n        this.setNames(names);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const data = toWebRData(val);\r\n      const ptr = Module._Rf_allocVector(RTypeMap.list, data.values.length);\r\n      protectInc(ptr, prot);\r\n\r\n      data.values.forEach((v, i) => {\r\n        // When we specifically use the `RList` constructor, deeply convert R objects to R lists\r\n        if (isSimpleObject(v)) {\r\n          Module._SET_VECTOR_ELT(ptr, i, new RList(v).ptr);\r\n        } else {\r\n          Module._SET_VECTOR_ELT(ptr, i, new RObject(v).ptr);\r\n        }\r\n      });\r\n\r\n      const _names = names ? names : data.names;\r\n      if (_names && _names.length !== data.values.length) {\r\n        throw new Error(\r\n          \"Can't construct named `RList`. Supplied `names` must be the same length as the list.\"\r\n        );\r\n      }\r\n      RObject.wrap(ptr).setNames(_names);\r\n\r\n      super(new RObjectBase(ptr));\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  get length(): number {\r\n    return Module._LENGTH(this.ptr);\r\n  }\r\n\r\n  isDataFrame(): boolean {\r\n    const classes = RPairlist.wrap(Module._ATTRIB(this.ptr)).get('class') as RNull | RCharacter;\r\n    return !classes.isNull() && classes.toArray().includes('data.frame');\r\n  }\r\n\r\n  toArray(options: { depth: number } = { depth: 1 }): WebRData[] {\r\n    return this.toJs(options).values;\r\n  }\r\n\r\n  toObject({\r\n    allowDuplicateKey = true,\r\n    allowEmptyKey = false,\r\n    depth = -1,\r\n  } = {}): NamedObject<WebRData> {\r\n    const entries = this.entries({ depth });\r\n    const keys = entries.map(([k,]) => k);\r\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\r\n      throw new Error('Duplicate key when converting list without allowDuplicateKey enabled');\r\n    }\r\n    if (!allowEmptyKey && keys.some((k) => !k)) {\r\n      throw new Error('Empty or null key when converting list without allowEmptyKey enabled');\r\n    }\r\n    return Object.fromEntries(\r\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\r\n    ) as NamedObject<WebRData>;\r\n  }\r\n\r\n  toD3(): NamedObject<WebRData>[] {\r\n    if (!this.isDataFrame()) {\r\n      throw new Error(\r\n        \"Can't convert R list object to D3 format. Object must be of class 'data.frame'.\"\r\n      );\r\n    }\r\n    const entries = this.entries() as Array<[string, atomicType[]]>;\r\n    return entries.reduce((a, entry) => {\r\n      entry[1].forEach((v, j) => a[j] = Object.assign(a[j] || {}, { [entry[0]!]: v }));\r\n      return a;\r\n    }, []);\r\n  }\r\n\r\n  entries(options: { depth: number } = { depth: -1 }): NamedEntries<WebRData> {\r\n    const obj = this.toJs(options);\r\n\r\n    // If this is a data frame, assume we have atomic vector columns and can\r\n    // convert directly to array values by default.\r\n    if (this.isDataFrame() && options.depth < 0) {\r\n      obj.values = (obj.values as RVectorAtomic<atomicType>[]).map((v) => v.toArray());\r\n    }\r\n    return obj.values.map((v, i) => [obj.names ? obj.names[i] : null, v]);\r\n  }\r\n\r\n  toJs(options: { depth: number } = { depth: 0 }, depth = 1): WebRDataJsNode {\r\n    return {\r\n      type: 'list',\r\n      names: this.names(),\r\n      values: [...Array(this.length).keys()].map((i) => {\r\n        if (options.depth && depth >= options.depth) {\r\n          return this.get(i + 1);\r\n        } else {\r\n          return this.get(i + 1).toJs(options, depth + 1);\r\n        }\r\n      }),\r\n    };\r\n  }\r\n}\r\n\r\nexport class RDataFrame extends RList {\r\n  constructor(val: WebRData) {\r\n    if (val instanceof RObjectBase) {\r\n      super(val);\r\n      if (!this.isDataFrame()) {\r\n        throw new Error(\"Can't construct `RDataFrame`. Supplied R object is not a `data.frame`.\");\r\n      }\r\n      return this;\r\n    }\r\n    return RDataFrame.fromObject(val);\r\n  }\r\n\r\n  static fromObject(obj: WebRData) {\r\n    const { names, values } = toWebRData(obj);\r\n    const prot = { n: 0 };\r\n\r\n    // Do we have consistent columns of atomic type? If so, make a `data.frame`.\r\n    try {\r\n      const hasNames = !!names && names.length > 0 && names.every((v) => v);\r\n      const hasArrays = values.length > 0 && values.every((v) => {\r\n        return Array.isArray(v) || ArrayBuffer.isView(v) || v instanceof ArrayBuffer;\r\n      });\r\n\r\n      if (hasNames && hasArrays) {\r\n        const _values = values as WebRData[][];\r\n        const isConsistentLength = _values.every((a) => a.length === _values[0].length);\r\n        const isAtomic = _values.every((a) => {\r\n          return isAtomicType(a[0]) || isRVectorAtomic(a[0]);\r\n        });\r\n\r\n        if (isConsistentLength && isAtomic) {\r\n          const listObj = new RList({\r\n            type: 'list',\r\n            names: names,\r\n            values: _values.map((a) => newObjectFromData(a))\r\n          });\r\n          protectInc(listObj, prot);\r\n\r\n          const asDataFrame = new RCall([new RSymbol('as.data.frame'), listObj]);\r\n          protectInc(asDataFrame, prot);\r\n\r\n          return new RDataFrame(asDataFrame.eval());\r\n        }\r\n      }\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n\r\n    // Not eligible as a `data.frame`, throw an error.\r\n    throw new Error(\"Can't construct `data.frame`. Source object is not eligible.\");\r\n  }\r\n\r\n  static fromD3(arr: { [key: string]: WebRData }[]) {\r\n    return this.fromObject(\r\n      Object.fromEntries(Object.keys(arr[0]).map((k) => [k, arr.map((v) => v[k])]))\r\n    );\r\n  }\r\n}\r\n\r\nexport class RFunction extends RObject {\r\n  exec(...args: (WebRDataRaw | RObject)[]): RObject {\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const call = new RCall([this, ...args]);\r\n      protectInc(call, prot);\r\n      return call.eval();\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  capture(options: EvalROptions = {}, ...args: (WebRDataRaw | RObject)[]) {\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const call = new RCall([this, ...args]);\r\n      protectInc(call, prot);\r\n      return call.capture(options);\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n}\r\n\r\nexport class RString extends RObject {\r\n  static CEType = {\r\n    CE_NATIVE: 0,\r\n    CE_UTF8: 1,\r\n    CE_LATIN1: 2,\r\n    CE_BYTES: 3,\r\n    CE_SYMBOL: 5,\r\n    CE_ANY: 99\r\n  } as const;\r\n\r\n  // Unlike symbols, strings are not cached and must thus be protected\r\n  constructor(x: WebRDataScalar<string>) {\r\n    if (x instanceof RObjectBase) {\r\n      assertRType(x, 'string');\r\n      super(x);\r\n      return;\r\n    }\r\n\r\n    const name = Module.allocateUTF8(x as string);\r\n\r\n    try {\r\n      super(new RObjectBase(Module._Rf_mkCharCE(name, RString.CEType.CE_UTF8)));\r\n    } finally {\r\n      Module._free(name);\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    const vmax = Module._vmaxget();\r\n    try {\r\n      return Module.UTF8ToString(Module._Rf_translateCharUTF8(this.ptr));\r\n    } finally {\r\n      Module._vmaxset(vmax);\r\n    }\r\n  }\r\n\r\n  toJs(): WebRDataJsString {\r\n    return {\r\n      type: 'string',\r\n      value: this.toString(),\r\n    };\r\n  }\r\n}\r\n\r\nexport class REnvironment extends RObject {\r\n  constructor(val: WebRData = {}) {\r\n    if (val instanceof RObjectBase) {\r\n      assertRType(val, 'environment');\r\n      super(val);\r\n      return this;\r\n    }\r\n    let nProt = 0;\r\n\r\n    try {\r\n      const { names, values } = toWebRData(val);\r\n\r\n      const ptr = protect(Module._R_NewEnv(objs.globalEnv.ptr, 0, 0));\r\n      ++nProt;\r\n\r\n      values.forEach((v, i) => {\r\n        const name = names ? names[i] : null;\r\n        if (!name) {\r\n          throw new Error(\"Can't create object in new environment with empty symbol name\");\r\n        }\r\n\r\n        const sym = new RSymbol(name);\r\n        const vObj = protect(new RObject(v));\r\n        try {\r\n          envPoke(ptr, sym, vObj);\r\n        } finally {\r\n          unprotect(1);\r\n        }\r\n      });\r\n\r\n      super(new RObjectBase(ptr));\r\n    } finally {\r\n      unprotect(nProt);\r\n    }\r\n  }\r\n\r\n  ls(all = false, sorted = true): string[] {\r\n    const ls = RCharacter.wrap(Module._R_lsInternal3(this.ptr, Number(all), Number(sorted)));\r\n    return ls.toArray() as string[];\r\n  }\r\n\r\n  bind(name: string, value: WebRData): void {\r\n    const sym = new RSymbol(name);\r\n    const valueObj = protect(new RObject(value));\r\n\r\n    try {\r\n      envPoke(this, sym, valueObj);\r\n    } finally {\r\n      unprotect(1);\r\n    }\r\n  }\r\n\r\n  names(): string[] {\r\n    return this.ls(true, true);\r\n  }\r\n\r\n  frame(): RObject {\r\n    return RObject.wrap(Module._FRAME(this.ptr));\r\n  }\r\n\r\n  subset(prop: number | string): RObject {\r\n    if (typeof prop === 'number') {\r\n      throw new Error('Object of type environment is not subsettable');\r\n    }\r\n    return this.getDollar(prop);\r\n  }\r\n\r\n  toObject({ depth = -1 } = {}): NamedObject<WebRData> {\r\n    const symbols = this.names();\r\n    return Object.fromEntries(\r\n      [...Array(symbols.length).keys()].map((i) => {\r\n        const value = this.getDollar(symbols[i]);\r\n        return [symbols[i], depth < 0 ? value : value.toJs({ depth })];\r\n      })\r\n    );\r\n  }\r\n\r\n  toJs(options: { depth: number } = { depth: 0 }, depth = 1): WebRDataJsNode {\r\n    const names = this.names();\r\n    const values = [...Array(names.length).keys()].map((i) => {\r\n      if (options.depth && depth >= options.depth) {\r\n        return this.getDollar(names[i]);\r\n      } else {\r\n        return this.getDollar(names[i]).toJs(options, depth + 1);\r\n      }\r\n    });\r\n\r\n    return {\r\n      type: 'environment',\r\n      names,\r\n      values,\r\n    };\r\n  }\r\n}\r\n\r\ntype TypedArray =\r\n  | Int8Array\r\n  | Uint8Array\r\n  | Int16Array\r\n  | Uint16Array\r\n  | Int32Array\r\n  | Uint32Array\r\n  | Float32Array\r\n  | Float64Array;\r\n\r\nexport type atomicType = number | boolean | Complex | string;\r\n\r\nabstract class RVectorAtomic<T extends atomicType> extends RObject {\r\n  constructor(\r\n    val: WebRDataAtomic<T>,\r\n    kind: RType,\r\n    newSetter: (ptr: RPtr) => (v: any, i: number) => void\r\n  ) {\r\n    if (val instanceof RObjectBase) {\r\n      assertRType(val, kind);\r\n      super(val);\r\n      return this;\r\n    }\r\n\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const { names, values } = toWebRData(val);\r\n\r\n      const ptr = Module._Rf_allocVector(RTypeMap[kind], values.length);\r\n      protectInc(ptr, prot);\r\n\r\n      values.forEach(newSetter(ptr));\r\n      RObject.wrap(ptr).setNames(names);\r\n\r\n      super(new RObjectBase(ptr));\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  get length(): number {\r\n    return Module._LENGTH(this.ptr);\r\n  }\r\n\r\n  get(prop: number | string): this {\r\n    return super.get(prop) as this;\r\n  }\r\n\r\n  subset(prop: number | string): this {\r\n    return super.subset(prop) as this;\r\n  }\r\n\r\n  getDollar(): RObject {\r\n    throw new Error('$ operator is invalid for atomic vectors');\r\n  }\r\n\r\n  detectMissing(): boolean[] {\r\n    const prot = { n: 0 };\r\n\r\n    try {\r\n      const call = Module._Rf_lang2(new RSymbol('is.na').ptr, this.ptr);\r\n      protectInc(call, prot);\r\n\r\n      const val = RLogical.wrap(safeEval(call, objs.baseEnv));\r\n      protectInc(val, prot);\r\n\r\n      const ret = val.toTypedArray();\r\n      return Array.from(ret).map((elt) => Boolean(elt));\r\n    } finally {\r\n      unprotect(prot.n);\r\n    }\r\n  }\r\n\r\n  abstract toTypedArray(): TypedArray;\r\n\r\n  toArray(): (T | null)[] {\r\n    const arr = this.toTypedArray();\r\n    return this.detectMissing().map((m, idx) => (m ? null : (arr[idx] as T)));\r\n  }\r\n\r\n  toObject({ allowDuplicateKey = true, allowEmptyKey = false } = {}): NamedObject<T | null> {\r\n    const entries = this.entries();\r\n    const keys = entries.map(([k,]) => k);\r\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\r\n      throw new Error(\r\n        'Duplicate key when converting atomic vector without allowDuplicateKey enabled'\r\n      );\r\n    }\r\n    if (!allowEmptyKey && keys.some((k) => !k)) {\r\n      throw new Error(\r\n        'Empty or null key when converting atomic vector without allowEmptyKey enabled'\r\n      );\r\n    }\r\n    return Object.fromEntries(\r\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\r\n    ) as NamedObject<T | null>;\r\n  }\r\n\r\n  entries(): NamedEntries<T | null> {\r\n    const values = this.toArray();\r\n    const names = this.names();\r\n    return values.map((v, i) => [names ? names[i] : null, v]);\r\n  }\r\n\r\n  toJs(): WebRDataJsAtomic<T> {\r\n    return {\r\n      type: this.type() as 'logical' | 'integer' | 'double' | 'complex' | 'character' | 'raw',\r\n      names: this.names(),\r\n      values: this.toArray(),\r\n    };\r\n  }\r\n}\r\n\r\nexport class RLogical extends RVectorAtomic<boolean> {\r\n  constructor(val: WebRDataAtomic<boolean>) {\r\n    super(val, 'logical', RLogical.#newSetter);\r\n  }\r\n\r\n  static #newSetter = (ptr: RPtr) => {\r\n    const data = Module._LOGICAL(ptr);\r\n    const naLogical = Module.getValue(Module._R_NaInt, 'i32');\r\n    return (v: null | boolean, i: number) => {\r\n      Module.setValue(data + 4 * i, v === null ? naLogical : Boolean(v), 'i32');\r\n    };\r\n  };\r\n\r\n  getBoolean(idx: number): boolean | null {\r\n    return this.get(idx).toArray()[0];\r\n  }\r\n\r\n  toBoolean(): boolean {\r\n    if (this.length !== 1) {\r\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\r\n    }\r\n    const val = this.getBoolean(1);\r\n    if (val === null) {\r\n      throw new Error(\"Can't convert missing value `NA` to a JS boolean\");\r\n    }\r\n    return val;\r\n  }\r\n\r\n  toTypedArray(): Int32Array {\r\n    return new Int32Array(\r\n      Module.HEAP32.subarray(\r\n        Module._LOGICAL(this.ptr) / 4,\r\n        Module._LOGICAL(this.ptr) / 4 + this.length\r\n      )\r\n    );\r\n  }\r\n\r\n  toArray(): (boolean | null)[] {\r\n    const arr = this.toTypedArray();\r\n    return this.detectMissing().map((m, idx) => (m ? null : Boolean(arr[idx])));\r\n  }\r\n}\r\n\r\nexport class RInteger extends RVectorAtomic<number> {\r\n  constructor(val: WebRDataAtomic<number>) {\r\n    super(val, 'integer', RInteger.#newSetter);\r\n  }\r\n\r\n  static #newSetter = (ptr: RPtr) => {\r\n    const data = Module._INTEGER(ptr);\r\n    const naInteger = Module.getValue(Module._R_NaInt, 'i32');\r\n\r\n    return (v: null | number, i: number) => {\r\n      Module.setValue(data + 4 * i, v === null ? naInteger : Math.round(Number(v)), 'i32');\r\n    };\r\n  };\r\n\r\n  getNumber(idx: number): number | null {\r\n    return this.get(idx).toArray()[0];\r\n  }\r\n\r\n  toNumber(): number {\r\n    if (this.length !== 1) {\r\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\r\n    }\r\n    const val = this.getNumber(1);\r\n    if (val === null) {\r\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\r\n    }\r\n    return val;\r\n  }\r\n\r\n  toTypedArray(): Int32Array {\r\n    return new Int32Array(\r\n      Module.HEAP32.subarray(\r\n        Module._INTEGER(this.ptr) / 4,\r\n        Module._INTEGER(this.ptr) / 4 + this.length\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport class RDouble extends RVectorAtomic<number> {\r\n  constructor(val: WebRDataAtomic<number>) {\r\n    super(val, 'double', RDouble.#newSetter);\r\n  }\r\n\r\n  static #newSetter = (ptr: RPtr) => {\r\n    const data = Module._REAL(ptr);\r\n    const naDouble = Module.getValue(Module._R_NaReal, 'double');\r\n\r\n    return (v: null | number, i: number) => {\r\n      Module.setValue(data + 8 * i, v === null ? naDouble : v, 'double');\r\n    };\r\n  };\r\n\r\n  getNumber(idx: number): number | null {\r\n    return this.get(idx).toArray()[0];\r\n  }\r\n\r\n  toNumber(): number {\r\n    if (this.length !== 1) {\r\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\r\n    }\r\n    const val = this.getNumber(1);\r\n    if (val === null) {\r\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\r\n    }\r\n    return val;\r\n  }\r\n\r\n  toTypedArray(): Float64Array {\r\n    return new Float64Array(\r\n      Module.HEAPF64.subarray(Module._REAL(this.ptr) / 8, Module._REAL(this.ptr) / 8 + this.length)\r\n    );\r\n  }\r\n}\r\n\r\nexport class RComplex extends RVectorAtomic<Complex> {\r\n  constructor(val: WebRDataAtomic<Complex>) {\r\n    super(val, 'complex', RComplex.#newSetter);\r\n  }\r\n\r\n  static #newSetter = (ptr: RPtr) => {\r\n    const data = Module._COMPLEX(ptr);\r\n    const naDouble = Module.getValue(Module._R_NaReal, 'double');\r\n\r\n    return (v: null | Complex, i: number) => {\r\n      Module.setValue(data + 8 * (2 * i), v === null ? naDouble : v.re, 'double');\r\n      Module.setValue(data + 8 * (2 * i + 1), v === null ? naDouble : v.im, 'double');\r\n    };\r\n  };\r\n\r\n  getComplex(idx: number): Complex | null {\r\n    return this.get(idx).toArray()[0];\r\n  }\r\n\r\n  toComplex(): Complex {\r\n    if (this.length !== 1) {\r\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\r\n    }\r\n    const val = this.getComplex(1);\r\n    if (val === null) {\r\n      throw new Error(\"Can't convert missing value `NA` to a JS object\");\r\n    }\r\n    return val;\r\n  }\r\n\r\n  toTypedArray(): Float64Array {\r\n    return new Float64Array(\r\n      Module.HEAPF64.subarray(\r\n        Module._COMPLEX(this.ptr) / 8,\r\n        Module._COMPLEX(this.ptr) / 8 + 2 * this.length\r\n      )\r\n    );\r\n  }\r\n\r\n  toArray(): (Complex | null)[] {\r\n    const arr = this.toTypedArray();\r\n    return this.detectMissing().map((m, idx) =>\r\n      m ? null : { re: arr[2 * idx], im: arr[2 * idx + 1] }\r\n    );\r\n  }\r\n}\r\n\r\nexport class RCharacter extends RVectorAtomic<string> {\r\n  constructor(val: WebRDataAtomic<string>) {\r\n    super(val, 'character', RCharacter.#newSetter);\r\n  }\r\n\r\n  static #newSetter = (ptr: RPtr) => {\r\n    return (v: null | string, i: number) => {\r\n      if (v === null) {\r\n        Module._SET_STRING_ELT(ptr, i, objs.naString.ptr);\r\n      } else {\r\n        Module._SET_STRING_ELT(ptr, i, new RString(v).ptr);\r\n      }\r\n    };\r\n  };\r\n\r\n  getString(idx: number): string | null {\r\n    return this.get(idx).toArray()[0];\r\n  }\r\n\r\n  toString(): string {\r\n    if (this.length !== 1) {\r\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\r\n    }\r\n    const val = this.getString(1);\r\n    if (val === null) {\r\n      throw new Error(\"Can't convert missing value `NA` to a JS string\");\r\n    }\r\n    return val;\r\n  }\r\n\r\n  toTypedArray(): Uint32Array {\r\n    return new Uint32Array(\r\n      Module.HEAPU32.subarray(\r\n        Module._STRING_PTR(this.ptr) / 4,\r\n        Module._STRING_PTR(this.ptr) / 4 + this.length\r\n      )\r\n    );\r\n  }\r\n\r\n  toArray(): (string | null)[] {\r\n    const vmax = Module._vmaxget();\r\n    try {\r\n      return this.detectMissing().map((m, idx) =>\r\n        m ? null : Module.UTF8ToString(\r\n          Module._Rf_translateCharUTF8(Module._STRING_ELT(this.ptr, idx))\r\n        )\r\n      );\r\n    } finally {\r\n      Module._vmaxset(vmax);\r\n    }\r\n  }\r\n}\r\n\r\nexport class RRaw extends RVectorAtomic<number> {\r\n  constructor(val: WebRDataAtomic<number>) {\r\n    if (val instanceof ArrayBuffer) {\r\n      val = new Uint8Array(val);\r\n    }\r\n    super(val, 'raw', RRaw.#newSetter);\r\n  }\r\n\r\n  static #newSetter = (ptr: RPtr) => {\r\n    const data = Module._RAW(ptr);\r\n\r\n    return (v: number, i: number) => {\r\n      Module.setValue(data + i, Number(v), 'i8');\r\n    };\r\n  };\r\n\r\n  getNumber(idx: number): number | null {\r\n    return this.get(idx).toArray()[0];\r\n  }\r\n\r\n  toNumber(): number {\r\n    if (this.length !== 1) {\r\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\r\n    }\r\n    const val = this.getNumber(1);\r\n    if (val === null) {\r\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\r\n    }\r\n    return val;\r\n  }\r\n\r\n  toTypedArray(): Uint8Array {\r\n    return new Uint8Array(\r\n      Module.HEAPU8.subarray(Module._RAW(this.ptr), Module._RAW(this.ptr) + this.length)\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\n * Convert the various types possible in the type union WebRData into\r\n * consistently typed arrays of names and values.\r\n */\r\nfunction toWebRData<T>(jsObj: WebRDataAtomic<T>): {\r\n  names: (string | null)[] | null;\r\n  values: (T | null)[];\r\n};\r\nfunction toWebRData(jsObj: WebRData): WebRData;\r\nfunction toWebRData(jsObj: WebRData): WebRData {\r\n  if (isWebRDataJs(jsObj)) {\r\n    return jsObj;\r\n  } else if (Array.isArray(jsObj) || ArrayBuffer.isView(jsObj)) {\r\n    return { names: null, values: jsObj };\r\n  } else if (jsObj && typeof jsObj === 'object' && !isComplex(jsObj)) {\r\n    return {\r\n      names: Object.keys(jsObj),\r\n      values: Object.values(jsObj),\r\n    };\r\n  }\r\n  return { names: null, values: [jsObj] };\r\n}\r\n\r\nexport function getRWorkerClass(type: RType | RCtor): typeof RObject {\r\n  const typeClasses: { [key: string]: typeof RObject } = {\r\n    object: RObject,\r\n    null: RNull,\r\n    symbol: RSymbol,\r\n    pairlist: RPairlist,\r\n    closure: RFunction,\r\n    environment: REnvironment,\r\n    call: RCall,\r\n    special: RFunction,\r\n    builtin: RFunction,\r\n    string: RString,\r\n    logical: RLogical,\r\n    integer: RInteger,\r\n    double: RDouble,\r\n    complex: RComplex,\r\n    character: RCharacter,\r\n    list: RList,\r\n    raw: RRaw,\r\n    function: RFunction,\r\n    dataframe: RDataFrame,\r\n  };\r\n  if (type in typeClasses) {\r\n    return typeClasses[type];\r\n  }\r\n  return RObject;\r\n}\r\n\r\n/**\r\n * Test for an RWorker.RObject instance.\r\n *\r\n * RWorker.RObject is the internal interface to R objects, intended to be used\r\n * on the worker thread.\r\n *\r\n * @private\r\n * @param {any} value The object to test.\r\n * @return {boolean} True if the object is an instance of an RObject.\r\n */\r\nexport function isRObject(value: any): value is RObject {\r\n  return value instanceof RObject;\r\n}\r\n\r\n/**\r\n * Test for an RWorker.RVectorAtomic instance.\r\n *\r\n * @private\r\n * @param {any} value The object to test.\r\n * @return {boolean} True if the object is an instance of an RVectorAtomic.\r\n */\r\nexport function isRVectorAtomic(value: any): value is RVectorAtomic<atomicType> {\r\n  const atomicRTypes = ['logical', 'integer', 'double', 'complex', 'character'];\r\n\r\n  return (\r\n    (isRObject(value) && atomicRTypes.includes(value.type()))\r\n    || (isRObject(value) && value.isNa())\r\n  );\r\n}\r\n\r\n/**\r\n * Test for an atomicType, including missing `null` values.\r\n *\r\n * @private\r\n * @param {any} value The object to test.\r\n * @return {boolean} True if the object is of type atomicType.\r\n */\r\nexport function isAtomicType(value: any): value is atomicType | null {\r\n  return (\r\n    value === null\r\n    || typeof value === 'number'\r\n    || typeof value === 'boolean'\r\n    || typeof value === 'string'\r\n    || isComplex(value)\r\n  );\r\n}\r\n\r\n/**\r\n * A store for persistent R objects, initialised at R startup.\r\n */\r\nexport let objs: {\r\n  baseEnv: REnvironment,\r\n  bracket2Symbol: RSymbol,\r\n  bracketSymbol: RSymbol,\r\n  dollarSymbol: RSymbol,\r\n  emptyEnv: REnvironment,\r\n  false: RLogical,\r\n  globalEnv: REnvironment,\r\n  na: RLogical,\r\n  namesSymbol: RSymbol,\r\n  naString: RObject,\r\n  null: RNull,\r\n  true: RLogical,\r\n  unboundValue: RObject,\r\n};\r\n\r\n/**\r\n * Populate the persistent R object store.\r\n * @internal\r\n */\r\nexport function initPersistentObjects() {\r\n  objs = {\r\n    baseEnv: REnvironment.wrap(Module.getValue(Module._R_BaseEnv, '*')),\r\n    bracket2Symbol: RSymbol.wrap(Module.getValue(Module._R_Bracket2Symbol, '*')),\r\n    bracketSymbol: RSymbol.wrap(Module.getValue(Module._R_BracketSymbol, '*')),\r\n    dollarSymbol: RSymbol.wrap(Module.getValue(Module._R_DollarSymbol, '*')),\r\n    emptyEnv: REnvironment.wrap(Module.getValue(Module._R_EmptyEnv, '*')),\r\n    false: RLogical.wrap(Module.getValue(Module._R_FalseValue, '*')),\r\n    globalEnv: REnvironment.wrap(Module.getValue(Module._R_GlobalEnv, '*')),\r\n    na: RLogical.wrap(Module.getValue(Module._R_LogicalNAValue, '*')),\r\n    namesSymbol: RSymbol.wrap(Module.getValue(Module._R_NamesSymbol, '*')),\r\n    naString: RObject.wrap(Module.getValue(Module._R_NaString, '*')),\r\n    null: RNull.wrap(Module.getValue(Module._R_NilValue, '*')),\r\n    true: RLogical.wrap(Module.getValue(Module._R_TrueValue, '*')),\r\n    unboundValue: RObject.wrap(Module.getValue(Module._R_UnboundValue, '*')),\r\n  };\r\n}\r\n", "import { IN_NODE } from './compat';\r\nimport { WebRError } from './error';\r\nimport { isComplex, isWebRDataJs } from './robj';\r\nimport { RObjectBase } from './robj-worker';\r\n\r\nexport type ResolveFn = (_value?: unknown) => void;\r\nexport type RejectFn = (_reason?: any) => void;\r\n\r\nexport function promiseHandles() {\r\n  const out = {\r\n    resolve: () => { return; },\r\n    reject: () => { return; },\r\n    promise: Promise.resolve(),\r\n  } as {\r\n    resolve: ResolveFn,\r\n    reject: RejectFn,\r\n    promise: Promise<unknown>,\r\n  };\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    out.resolve = resolve;\r\n    out.reject = reject;\r\n  });\r\n  out.promise = promise;\r\n\r\n  return out;\r\n}\r\n\r\nexport function sleep(ms: number) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function replaceInObject<T>(\r\n  obj: T | T[],\r\n  test: (obj: any) => boolean,\r\n  replacer: (obj: any, ...replacerArgs: any[]) => unknown,\r\n  ...replacerArgs: unknown[]\r\n): T | T[] {\r\n  if (obj === null || obj === undefined || isImageBitmap(obj)) {\r\n    return obj;\r\n  }\r\n  if (obj instanceof ArrayBuffer) {\r\n    return new Uint8Array(obj) as T;\r\n  }\r\n  if (test(obj)) {\r\n    return replacer(obj, ...replacerArgs) as T;\r\n  }\r\n  if (Array.isArray(obj) || ArrayBuffer.isView(obj)) {\r\n    return (obj as unknown[]).map((v) =>\r\n      replaceInObject(v, test, replacer, ...replacerArgs)\r\n    ) as T[];\r\n  }\r\n  if (obj instanceof RObjectBase) {\r\n    return obj;\r\n  }\r\n  if (typeof obj === 'object') {\r\n    return Object.fromEntries(\r\n      Object.entries(obj).map(([k, v]) => [k, replaceInObject(v, test, replacer, ...replacerArgs)])\r\n    ) as T;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/* Workaround for loading a cross-origin script.\r\n *\r\n * When fetching a worker script, the fetch is required by the spec to\r\n * use \"same-origin\" mode. This is to avoid loading a worker with a\r\n * cross-origin global scope, which can allow for a cross-origin\r\n * restriction bypass.\r\n *\r\n * When the fetch URL begins with 'http', we assume the request is\r\n * cross-origin. We download the content of the URL using a XHR first,\r\n * create a blob URL containing the requested content, then load the\r\n * blob URL as a script.\r\n *\r\n * The origin of a blob URL is the same as that of the environment that\r\n * created the URL, and so the global scope of the resulting worker is\r\n * no longer cross-origin. In that case, the cross-origin restriction\r\n * bypass is not possible, and the script is permitted to be loaded.\r\n */\r\nexport function newCrossOriginWorker(url: string, cb: (worker: Worker) => void, onError?: (error: Error) => void): void {\r\n  const req = new XMLHttpRequest();\r\n  req.open('get', url, true);\r\n  req.onload = () => {\r\n    if (req.status >= 200 && req.status < 300) {\r\n      try {\r\n        const worker = new Worker(URL.createObjectURL(new Blob([req.responseText])));\r\n        cb(worker);\r\n      } catch (error) {\r\n        if (onError) {\r\n          onError(error instanceof Error ? error : new Error(String(error)));\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    } else {\r\n      if (onError) {\r\n        onError(new Error(`Worker loading error: HTTP ${req.status}`));\r\n      } else {\r\n        console.error(`HTTP Error: ${req.status}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  req.onerror = () => {\r\n    if (onError) {\r\n      onError(new Error(`Network error loading ${url}`));\r\n    } else {\r\n      console.error(`Network error loading ${url}`);\r\n    }\r\n  };\r\n  req.send();\r\n}\r\n\r\nexport function isCrossOrigin(urlString: string) {\r\n  if (IN_NODE) return false;\r\n  const url1 = new URL(location.href);\r\n  const url2 = new URL(urlString, location.origin);\r\n  if (url1.host === url2.host && url1.port === url2.port && url1.protocol === url2.protocol) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function isImageBitmap(value: any): value is ImageBitmap {\r\n  return (typeof ImageBitmap !== 'undefined' && value instanceof ImageBitmap);\r\n}\r\n\r\nexport function throwUnreachable(context?: string) {\r\n  let msg = 'Reached the unreachable';\r\n  msg = msg + (context ? ': ' + context : '.');\r\n\r\n  throw new WebRError(msg);\r\n}\r\n\r\nexport function isSimpleObject(value: any): value is {[key: string | number | symbol]: any} {\r\n  return (\r\n    typeof value === 'object' &&\r\n    value !== null &&\r\n    !Array.isArray(value) &&\r\n    !(ArrayBuffer.isView(value)) &&\r\n    !isComplex(value) &&\r\n    !isWebRDataJs(value) &&\r\n    !(value instanceof Date) &&\r\n    !(value instanceof RegExp) &&\r\n    !(value instanceof Error) &&\r\n    !(value instanceof RObjectBase) &&\r\n    Object.getPrototypeOf(value) === Object.prototype\r\n  );\r\n}\r\n\r\n// From https://stackoverflow.com/a/9458996\r\nexport function bufferToBase64(buffer: ArrayBuffer) {\r\n  let binary = '';\r\n  const bytes = new Uint8Array(buffer);\r\n  const len = bytes.byteLength;\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i]);\r\n  }\r\n  return window.btoa(binary);\r\n}\r\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\r\n\r\nimport { Endpoint, SZ_BUF_FITS_IDX, SZ_BUF_SIZE_IDX, generateUUID } from './task-common';\r\n\r\nimport { sleep } from '../utils';\r\nimport { SyncRequestData } from './message';\r\nimport { encode } from '@msgpack/msgpack';\r\n\r\nimport { IN_NODE } from '../compat';\r\nimport type { Worker as NodeWorker } from 'worker_threads';\r\n\r\nconst encoder = new TextEncoder();\r\n\r\n/**\r\n * Respond to a blocking request. Most of the work has already been done in\r\n * asynclink, we are just responsible here for getting the return value back to\r\n * the requester through this slightly convoluted Atomics protocol.\r\n * @param {Endpoint} endpoint  A message port to receive messages from. Other\r\n *        thread is blocked, so we can't send messages back.\r\n * @param {SyncRequestData} data The message that was recieved. We will use it\r\n *        to read out the buffers to write the answer into. NOTE: requester\r\n *        owns buffers.\r\n * @param {any} response The value we want to send back to the requester. We\r\n *        have to encode it into data_buffer.\r\n */\r\nexport async function syncResponse(endpoint: Endpoint, data: SyncRequestData, response: any) {\r\n  try {\r\n    // eslint-disable-next-line prefer-const\r\n    let { taskId, sizeBuffer, dataBuffer, signalBuffer } = data;\r\n    // console.warn(msg);\r\n\r\n    const bytes = encode(response);\r\n    const fits = bytes.length <= dataBuffer.length;\r\n\r\n    Atomics.store(sizeBuffer, SZ_BUF_SIZE_IDX, bytes.length);\r\n    Atomics.store(sizeBuffer, SZ_BUF_FITS_IDX, +fits);\r\n    if (!fits) {\r\n      // console.log(\"      need larger buffer\", taskId)\r\n      // Request larger buffer\r\n      const [uuid, dataPromise] = requestResponseMessage(endpoint);\r\n\r\n      // Write UUID into dataBuffer so syncRequest knows where to respond to.\r\n      dataBuffer.set(encoder.encode(uuid));\r\n      await signalRequester(signalBuffer, taskId!);\r\n\r\n      // Wait for response with new bigger dataBuffer\r\n      dataBuffer = (await dataPromise).dataBuffer as Uint8Array;\r\n    }\r\n\r\n    // Encode result into dataBuffer\r\n    dataBuffer.set(bytes);\r\n    Atomics.store(sizeBuffer, SZ_BUF_FITS_IDX, +true);\r\n\r\n    // console.log(\"       signaling completion\", taskId)\r\n    await signalRequester(signalBuffer, taskId as number);\r\n  } catch (e) {\r\n    console.warn(e);\r\n  }\r\n}\r\n\r\nfunction requestResponseMessage(ep: Endpoint): [string, Promise<any>] {\r\n  const id = generateUUID();\r\n  return [\r\n    id,\r\n    new Promise((resolve) => {\r\n      if (IN_NODE) {\r\n        (ep as unknown as NodeWorker).once('message', (message: any) => {\r\n          if (!message.id || message.id !== id) {\r\n            return;\r\n          }\r\n          resolve(message);\r\n        });\r\n      } else {\r\n        ep.addEventListener('message', function l(ev: MessageEvent) {\r\n          if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n            return;\r\n          }\r\n          ep.removeEventListener('message', l as EventListenerOrEventListenerObject);\r\n          resolve(ev.data);\r\n        } as EventListenerOrEventListenerObject);\r\n      }\r\n      if (ep.start) {\r\n        ep.start();\r\n      }\r\n    }),\r\n  ];\r\n}\r\n\r\nasync function signalRequester(signalBuffer: Int32Array, taskId: number) {\r\n  const index = (taskId >> 1) % 32;\r\n  let sleepTime = 1;\r\n  while (Atomics.compareExchange(signalBuffer, index + 1, 0, taskId) !== 0) {\r\n    // No Atomics.asyncWait except on Chrome =(\r\n    await sleep(sleepTime);\r\n    if (sleepTime < 32) {\r\n      // exponential backoff\r\n      sleepTime *= 2;\r\n    }\r\n  }\r\n  Atomics.or(signalBuffer, 0, 1 << index);\r\n  Atomics.notify(signalBuffer, 0);\r\n}\r\n", "// From https://stackoverflow.com/questions/47157428/how-to-implement-a-pseudo-blocking-async-queue-in-js-ts\r\n/**\r\n * @module Queue\r\n */\r\n\r\n/**\r\n * Asynchronous queue mechanism to be used by the communication channels.\r\n * @typeParam T The type of item to be stored in the queue.\r\n */\r\nexport class AsyncQueue<T> {\r\n  #promises: Promise<T>[];\r\n  #resolvers: ((t: T) => void)[];\r\n\r\n  constructor() {\r\n    this.#resolvers = [];\r\n    this.#promises = [];\r\n  }\r\n\r\n  reset() {\r\n    this.#resolvers = [];\r\n    this.#promises = [];\r\n  }\r\n\r\n  put(t: T) {\r\n    if (!this.#resolvers.length) {\r\n      this.#add();\r\n    }\r\n    const resolve = this.#resolvers.shift()!;\r\n    resolve(t);\r\n  }\r\n\r\n  async get() {\r\n    if (!this.#promises.length) {\r\n      this.#add();\r\n    }\r\n    const promise = this.#promises.shift()!;\r\n    return promise;\r\n  }\r\n\r\n  isEmpty() {\r\n    return !this.#promises.length;\r\n  }\r\n\r\n  isBlocked() {\r\n    return !!this.#resolvers.length;\r\n  }\r\n\r\n  get length() {\r\n    return this.#promises.length - this.#resolvers.length;\r\n  }\r\n\r\n  #add() {\r\n    this.#promises.push(\r\n      new Promise((resolve) => {\r\n        this.#resolvers.push(resolve);\r\n      })\r\n    );\r\n  }\r\n}\r\n", "/**\r\n * WebR communication channel messaging and request types.\r\n * @module Message\r\n */\r\nimport { generateUUID, transfer, UUID } from './task-common';\r\n\r\n/** A webR communication channel message. */\r\nexport interface Message {\r\n  type: string;\r\n  data?: any;\r\n}\r\n\r\n/** A webR communication channel request. */\r\nexport interface Request {\r\n  type: 'request';\r\n  data: {\r\n    uuid: UUID;\r\n    msg: Message;\r\n  };\r\n}\r\n\r\n/** A webR communication channel response. */\r\nexport interface Response {\r\n  type: 'response';\r\n  data: {\r\n    uuid: UUID;\r\n    resp: unknown;\r\n  };\r\n}\r\n\r\n/** @internal */\r\nexport function newRequest(msg: Message, transferables?: [Transferable]): Request {\r\n  return newRequestResponseMessage(\r\n    {\r\n      type: 'request',\r\n      data: {\r\n        uuid: generateUUID(),\r\n        msg: msg,\r\n      },\r\n    },\r\n    transferables\r\n  );\r\n}\r\n\r\n/** @internal */\r\nexport function newResponse(uuid: UUID, resp: unknown, transferables?: [Transferable]): Response {\r\n  return newRequestResponseMessage(\r\n    {\r\n      type: 'response',\r\n      data: {\r\n        uuid,\r\n        resp,\r\n      },\r\n    },\r\n    transferables\r\n  );\r\n}\r\n\r\n/** @internal */\r\nfunction newRequestResponseMessage<T>(msg: T, transferables?: [Transferable]): T {\r\n  // Signal to Synclink that the data contains objects we wish to\r\n  // transfer, as in `postMessage()`\r\n  if (transferables) {\r\n    transfer(msg, transferables);\r\n  }\r\n  return msg;\r\n}\r\n\r\n/** A webR communication channel sync-request.\r\n * @internal\r\n */\r\nexport interface SyncRequest {\r\n  type: 'sync-request';\r\n  data: {\r\n    msg: Message;\r\n    reqData: SyncRequestData;\r\n  };\r\n}\r\n\r\n/** Transfer data required when using sync-request with SharedArrayBuffer.\r\n * @internal */\r\nexport interface SyncRequestData {\r\n  taskId?: number;\r\n  sizeBuffer: Int32Array;\r\n  signalBuffer: Int32Array;\r\n  dataBuffer: Uint8Array;\r\n}\r\n\r\n/** @internal */\r\nexport function newSyncRequest(msg: Message, data: SyncRequestData): SyncRequest {\r\n  return {\r\n    type: 'sync-request',\r\n    data: { msg, reqData: data },\r\n  };\r\n}\r\n", "/**\r\n * Types containing references to R objects, raw data or errors over the webR\r\n * communication channel.\r\n * @module Payload\r\n */\r\nimport { WebRDataRaw, RPtr, RType } from './robj';\r\nimport { WebRWorkerError } from './error';\r\n\r\nexport type WebRPayloadRaw = {\r\n  obj: WebRDataRaw;\r\n  payloadType: 'raw';\r\n};\r\n\r\nexport type WebRPayloadPtr = {\r\n  obj: {\r\n    type?: RType;\r\n    ptr: RPtr;\r\n    methods?: string[];\r\n  };\r\n  payloadType: 'ptr';\r\n};\r\n\r\nexport type WebRPayloadErr = {\r\n  obj: {\r\n    message: string;\r\n    name: string;\r\n    errno?: number;\r\n    stack?: string;\r\n  };\r\n  payloadType: 'err';\r\n};\r\n\r\n// On the main side we shouldn't see any error payload as these are\r\n// rethrown as JS exceptions\r\nexport type WebRPayload = WebRPayloadRaw | WebRPayloadPtr;\r\nexport type WebRPayloadWorker = WebRPayloadRaw | WebRPayloadPtr | WebRPayloadErr;\r\n\r\n/* @internal */\r\nexport function webRPayloadAsError(payload: WebRPayloadErr): Error {\r\n  const e = new WebRWorkerError(payload.obj.message);\r\n  // Forward the error name to the main thread, if more specific than a general `Error`\r\n  if (payload.obj.name == 'ErrnoError') {\r\n    e.message = `ErrnoError: ${String(payload.obj.errno)}`;\r\n  } else if (payload.obj.name !== 'Error') {\r\n    e.name = payload.obj.name;\r\n  }\r\n  e.stack = payload.obj.stack;\r\n  return e;\r\n}\r\n\r\n/**\r\n * Test for an WebRPayload instance.\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an WebRPayload.\r\n */\r\nexport function isWebRPayload(value: any): value is WebRPayload {\r\n  return !!value && typeof value === 'object' && 'payloadType' in value && 'obj' in value;\r\n}\r\n\r\n/**\r\n * Test for an WebRPayloadPtr instance.\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an WebRPayloadPtr.\r\n */\r\nexport function isWebRPayloadPtr(value: any): value is WebRPayloadPtr {\r\n  return isWebRPayload(value) && value.payloadType === 'ptr';\r\n}\r\n\r\n/**\r\n * Test for an WebRPayloadRaw instance.\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an WebRPayloadRaw.\r\n */\r\nexport function isWebRPayloadRaw(value: any): value is WebRPayloadRaw {\r\n  return isWebRPayload(value) && value.payloadType === 'raw';\r\n}\r\n", "/**\r\n * Interfaces for the webR main and worker thread communication channels.\r\n * @module Channel\r\n */\r\n\r\nimport { promiseHandles, ResolveFn, RejectFn } from '../utils';\r\nimport { AsyncQueue } from './queue';\r\nimport { Message, newRequest, Response } from './message';\r\nimport { WebRPayload, WebRPayloadWorker, webRPayloadAsError } from '../payload';\r\nimport { WebRChannelError } from '../error';\r\n\r\n// The channel structure is asymmetric:\r\n//\r\n// - The main thread maintains the input and output queues. All\r\n//   messages sent from main are stored in the input queue. The input\r\n//   queue is pull-based, it's the worker that initiates a transfer\r\n//   via a sync-request.\r\n//\r\n//   The output queue is filled at the initiative of the worker. The\r\n//   main thread asynchronously reads from this queue, typically in an\r\n//   async infloop.\r\n//\r\n// - The worker synchronously reads from the input queue. Reading a\r\n//   message blocks until an input is available. Writing a message to\r\n//   the output queue is equivalent to calling `postMessage()` and\r\n//   returns immediately.\r\n//\r\n//   Note that the messages sent from main to worker need to be\r\n//   serialised. There is no structured cloning involved, and\r\n//   ArrayBuffers can't be transferred, only copied.\r\n\r\nexport abstract class ChannelMain {\r\n  inputQueue = new AsyncQueue<Message>();\r\n  outputQueue = new AsyncQueue<Message>();\r\n  systemQueue = new AsyncQueue<Message>();\r\n\r\n  #parked = new Map<string, { resolve: ResolveFn; reject: RejectFn }>();\r\n  #closed = false;\r\n\r\n  abstract initialised: Promise<unknown>;\r\n  abstract close(): void;\r\n  abstract interrupt(): void;\r\n\r\n  async read(): Promise<Message> {\r\n    return await this.outputQueue.get();\r\n  }\r\n\r\n  async flush(): Promise<Message[]> {\r\n    const msg: Message[] = [];\r\n    while (!this.outputQueue.isEmpty()) {\r\n      msg.push(await this.read());\r\n    }\r\n    return msg;\r\n  }\r\n\r\n  async readSystem(): Promise<Message> {\r\n    return await this.systemQueue.get();\r\n  }\r\n\r\n  write(msg: Message): void {\r\n    if (this.#closed) {\r\n      throw new WebRChannelError(\"The webR communication channel has been closed.\");\r\n    }\r\n    this.inputQueue.put(msg);\r\n  }\r\n\r\n  async request(msg: Message, transferables?: [Transferable]): Promise<WebRPayload> {\r\n    const req = newRequest(msg, transferables);\r\n\r\n    const { resolve, reject, promise } = promiseHandles();\r\n    this.#parked.set(req.data.uuid, { resolve, reject });\r\n\r\n    this.write(req);\r\n    return promise as Promise<WebRPayload>;\r\n  }\r\n\r\n  protected putClosedMessage(): void {\r\n    this.#closed = true;\r\n    this.outputQueue.put({ type: 'closed' });\r\n  }\r\n\r\n  protected resolveResponse(msg: Response) {\r\n    const uuid = msg.data.uuid;\r\n    const handles = this.#parked.get(uuid);\r\n\r\n    if (handles) {\r\n      const payload = msg.data.resp as WebRPayloadWorker;\r\n      this.#parked.delete(uuid);\r\n\r\n      if (payload.payloadType === 'err') {\r\n        handles.reject(webRPayloadAsError(payload));\r\n      } else {\r\n        handles.resolve(payload);\r\n      }\r\n    } else {\r\n      console.warn(\"Can't find request.\");\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ChannelWorker {\r\n  resolve(): void;\r\n  write(msg: Message, transfer?: [Transferable]): void;\r\n  writeSystem(msg: Message, transfer?: [Transferable]): void;\r\n  read(): Message;\r\n  handleInterrupt(): void;\r\n  setInterrupt(interrupt: () => void): void;\r\n  run(args: string[]): void;\r\n  inputOrDispatch: () => number;\r\n  setDispatchHandler: (dispatch: (msg: Message) => void) => void;\r\n  onMessageFromMainThread: (msg: Message) => void;\r\n}\r\n\r\n/**\r\n * Handler functions dealing with setup and communication over a Service Worker.\r\n */\r\nexport interface ServiceWorkerHandlers {\r\n  handleActivate: (this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any;\r\n  handleFetch: (this: ServiceWorkerGlobalScope, ev: FetchEvent) => any;\r\n  handleInstall: (this: ServiceWorkerGlobalScope, ev: ExtendableEvent) => any;\r\n  handleMessage: (this: ServiceWorkerGlobalScope, ev: ExtendableMessageEvent) => any;\r\n}\r\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\r\n\r\nimport {\r\n  Endpoint,\r\n  SZ_BUF_DOESNT_FIT,\r\n  SZ_BUF_FITS_IDX,\r\n  SZ_BUF_SIZE_IDX,\r\n  UUID_LENGTH,\r\n} from './task-common';\r\n\r\nimport { newSyncRequest, Message } from './message';\r\nimport { decode } from '@msgpack/msgpack';\r\n\r\nconst decoder = new TextDecoder('utf-8');\r\n\r\nexport class SyncTask {\r\n  endpoint: Endpoint;\r\n  msg: Message;\r\n  transfers: Transferable[];\r\n\r\n  #scheduled = false;\r\n  #resolved: boolean;\r\n  #result?: any;\r\n  #exception?: any;\r\n\r\n  // sync only\r\n  taskId?: number;\r\n  #syncGen?: Generator<void, unknown, void>;\r\n  sizeBuffer?: Int32Array;\r\n  signalBuffer?: Int32Array;\r\n  syncifier = new _Syncifier();\r\n\r\n  constructor(endpoint: Endpoint, msg: Message, transfers: Transferable[] = []) {\r\n    this.endpoint = endpoint;\r\n    this.msg = msg;\r\n    this.transfers = transfers;\r\n    this.#resolved = false;\r\n  }\r\n\r\n  scheduleSync() {\r\n    if (this.#scheduled) {\r\n      return;\r\n    }\r\n    this.#scheduled = true;\r\n\r\n    this.syncifier.scheduleTask(this);\r\n    this.#syncGen = this.doSync();\r\n    this.#syncGen.next();\r\n    return this;\r\n  }\r\n\r\n  poll() {\r\n    if (!this.#scheduled) {\r\n      throw new Error('Task not synchronously scheduled');\r\n    }\r\n\r\n    const { done, value } = this.#syncGen!.next();\r\n    if (!done) {\r\n      return false;\r\n    }\r\n\r\n    this.#resolved = true;\r\n    this.#result = value;\r\n\r\n    return true;\r\n  }\r\n\r\n  *doSync() {\r\n    // just use syncRequest.\r\n    const { endpoint, msg, transfers } = this;\r\n    const sizeBuffer = new Int32Array(new SharedArrayBuffer(8));\r\n    const signalBuffer = this.signalBuffer!;\r\n    const taskId = this.taskId;\r\n\r\n    // Ensure status is cleared. We will notify\r\n    let dataBuffer = acquireDataBuffer(UUID_LENGTH);\r\n    // console.log(\"===requesting\", taskId);\r\n\r\n    const syncMsg = newSyncRequest(msg, {\r\n      sizeBuffer,\r\n      dataBuffer,\r\n      signalBuffer,\r\n      taskId,\r\n    });\r\n\r\n    endpoint.postMessage(syncMsg, transfers);\r\n    yield;\r\n\r\n    if (Atomics.load(sizeBuffer, SZ_BUF_FITS_IDX) === SZ_BUF_DOESNT_FIT) {\r\n      // There wasn't enough space, make a bigger dataBuffer.\r\n      // First read uuid for response out of current dataBuffer\r\n      const id = decoder.decode(dataBuffer.slice(0, UUID_LENGTH));\r\n      releaseDataBuffer(dataBuffer);\r\n      const size = Atomics.load(sizeBuffer, SZ_BUF_SIZE_IDX);\r\n      dataBuffer = acquireDataBuffer(size);\r\n      // console.log(\"===bigger data buffer\", taskId);\r\n      endpoint.postMessage({ id, dataBuffer });\r\n      yield;\r\n    }\r\n\r\n    const size = Atomics.load(sizeBuffer, SZ_BUF_SIZE_IDX);\r\n    // console.log(\"===completing\", taskId);\r\n    return decode(dataBuffer.slice(0, size));\r\n  }\r\n\r\n  get result() {\r\n    if (this.#exception) {\r\n      throw this.#exception;\r\n    }\r\n    // console.log(this.#resolved);\r\n    if (this.#resolved) {\r\n      return this.#result as unknown;\r\n    }\r\n    throw new Error('Not ready.');\r\n  }\r\n\r\n  syncify(): any {\r\n    this.scheduleSync();\r\n    this.syncifier.syncifyTask(this);\r\n    return this.result;\r\n  }\r\n}\r\n\r\nclass _Syncifier {\r\n  nextTaskId: Int32Array;\r\n  signalBuffer: Int32Array;\r\n  tasks: Map<number, SyncTask>;\r\n\r\n  constructor() {\r\n    this.nextTaskId = new Int32Array([1]);\r\n    this.signalBuffer = new Int32Array(new SharedArrayBuffer(32 * 4 + 4));\r\n    this.tasks = new Map();\r\n  }\r\n\r\n  scheduleTask(task: SyncTask) {\r\n    task.taskId = this.nextTaskId[0];\r\n    this.nextTaskId[0] += 2;\r\n    task.signalBuffer = this.signalBuffer;\r\n    this.tasks.set(task.taskId, task);\r\n  }\r\n\r\n  waitOnSignalBuffer() {\r\n    const timeout = 50;\r\n    for (; ;) {\r\n      const status = Atomics.wait(this.signalBuffer, 0, 0, timeout);\r\n      switch (status) {\r\n        case 'ok':\r\n        case 'not-equal':\r\n          return;\r\n        case 'timed-out':\r\n          if (interruptBuffer[0] !== 0) {\r\n            handleInterrupt();\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error('Unreachable');\r\n      }\r\n    }\r\n  }\r\n\r\n  *tasksIdsToWakeup() {\r\n    const flag = Atomics.load(this.signalBuffer, 0);\r\n    for (let i = 0; i < 32; i++) {\r\n      const bit = 1 << i;\r\n      if (flag & bit) {\r\n        Atomics.and(this.signalBuffer, 0, ~bit);\r\n        const wokenTask = Atomics.exchange(this.signalBuffer, i + 1, 0);\r\n        yield wokenTask;\r\n      }\r\n    }\r\n  }\r\n\r\n  pollTasks(task?: SyncTask) {\r\n    let result = false;\r\n    for (const wokenTaskId of this.tasksIdsToWakeup()) {\r\n      // console.log(\"poll task\", wokenTaskId, \"looking for\",task);\r\n      const wokenTask = this.tasks.get(wokenTaskId);\r\n      if (!wokenTask) {\r\n        throw new Error(`Assertion error: unknown taskId ${wokenTaskId}.`);\r\n      }\r\n      if (wokenTask.poll()) {\r\n        // console.log(\"completed task \", wokenTaskId, wokenTask, wokenTask._result);\r\n        this.tasks.delete(wokenTaskId);\r\n        if (wokenTask === task) {\r\n          result = true;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  syncifyTask(task: SyncTask) {\r\n    for (; ;) {\r\n      this.waitOnSignalBuffer();\r\n      // console.log(\"syncifyTask:: woke\");\r\n      if (this.pollTasks(task)) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst dataBuffers: Uint8Array[][] = [];\r\n\r\nfunction acquireDataBuffer(size: number): Uint8Array {\r\n  const powerof2 = Math.ceil(Math.log2(size));\r\n  if (!dataBuffers[powerof2]) {\r\n    dataBuffers[powerof2] = [];\r\n  }\r\n  const result = dataBuffers[powerof2].pop();\r\n  if (result) {\r\n    result.fill(0);\r\n    return result;\r\n  }\r\n  return new Uint8Array(new SharedArrayBuffer(2 ** powerof2));\r\n}\r\n\r\nfunction releaseDataBuffer(buffer: Uint8Array) {\r\n  const powerof2 = Math.ceil(Math.log2(buffer.byteLength));\r\n  dataBuffers[powerof2].push(buffer);\r\n}\r\n\r\nlet interruptBuffer = new Int32Array(new ArrayBuffer(4));\r\n\r\nlet handleInterrupt = (): void => {\r\n  interruptBuffer[0] = 0;\r\n  throw new Error('Interrupted!');\r\n};\r\n\r\n/**\r\n * Sets the interrupt handler. This is called when the computation is\r\n * interrupted. Should zero the interrupt buffer and throw an exception.\r\n * @internal\r\n */\r\nexport function setInterruptHandler(handler: () => void) {\r\n  handleInterrupt = handler;\r\n}\r\n\r\n/**\r\n * Sets the interrupt buffer. Should be a shared array buffer. When element 0\r\n * is set non-zero it signals an interrupt.\r\n * @internal\r\n */\r\nexport function setInterruptBuffer(buffer: ArrayBufferLike) {\r\n  interruptBuffer = new Int32Array(buffer);\r\n}\r\n", "import { promiseHandles, newCrossOriginWorker, isCrossOrigin } from '../utils';\r\nimport { Message, Response, SyncRequest } from './message';\r\nimport { Endpoint } from './task-common';\r\nimport { syncResponse } from './task-main';\r\nimport { ChannelMain, ChannelWorker } from './channel';\r\nimport { ChannelType } from './channel-common';\r\nimport { WebROptions } from '../webr-main';\r\nimport { WebRChannelError, WebRWorkerError } from '../error';\r\n\r\nimport { IN_NODE } from '../compat';\r\nimport type { Worker as NodeWorker } from 'worker_threads';\r\nif (IN_NODE) {\r\n  (globalThis as any).Worker = require('worker_threads').Worker as NodeWorker;\r\n}\r\n\r\n// Main ----------------------------------------------------------------\r\n\r\nexport class SharedBufferChannelMain extends ChannelMain {\r\n  #interruptBuffer?: Int32Array;\r\n\r\n  initialised: Promise<unknown>;\r\n  resolve: (_?: unknown) => void;\r\n  reject: (message: string | Error) => void;\r\n  close = () => { return; };\r\n\r\n  constructor(config: Required<WebROptions>) {\r\n    super();\r\n    ({ resolve: this.resolve, reject: this.reject, promise: this.initialised } = promiseHandles());\r\n\r\n    const initWorker = (worker: Worker) => {\r\n      this.#handleEventsFromWorker(worker);\r\n      this.close = () => {\r\n        worker.terminate();\r\n        this.putClosedMessage();\r\n      };\r\n      const msg = {\r\n        type: 'init',\r\n        data: { config, channelType: ChannelType.SharedArrayBuffer },\r\n      } as Message;\r\n      worker.postMessage(msg);\r\n    };\r\n\r\n    if (isCrossOrigin(config.baseUrl)) {\r\n      newCrossOriginWorker(\r\n        `${config.baseUrl}webr-worker.js`,\r\n        (worker: Worker) => initWorker(worker),\r\n        (error: Error) => {\r\n          this.reject(new WebRWorkerError(`Worker loading error: ${error.message}`));\r\n        }\r\n      );\r\n    } else {\r\n      const worker = new Worker(`${config.baseUrl}webr-worker.js`);\r\n      initWorker(worker);\r\n    }\r\n  }\r\n\r\n  interrupt() {\r\n    if (!this.#interruptBuffer) {\r\n      throw new WebRChannelError('Failed attempt to interrupt before initialising interruptBuffer');\r\n    }\r\n    this.inputQueue.reset();\r\n    this.#interruptBuffer[0] = 1;\r\n  }\r\n\r\n  #handleEventsFromWorker(worker: Worker) {\r\n    if (IN_NODE) {\r\n      (worker as unknown as NodeWorker).on('message', (message: Message) => {\r\n        void this.#onMessageFromWorker(worker, message);\r\n      });\r\n      (worker as unknown as NodeWorker).on('error', (ev: Event) => {\r\n        console.error(ev);\r\n        this.reject(new WebRWorkerError(\r\n          \"An error occurred initialising the webR SharedBufferChannel worker.\"\r\n        ));\r\n      });\r\n    } else {\r\n      worker.onmessage = (ev: MessageEvent) =>\r\n        this.#onMessageFromWorker(worker, ev.data as Message);\r\n      worker.onerror = (ev) => {\r\n        console.error(ev);\r\n        this.reject(new WebRWorkerError(\r\n          \"An error occurred initialising the webR SharedBufferChannel worker.\"\r\n        ));\r\n      };\r\n    }\r\n  }\r\n\r\n  #onMessageFromWorker = async (worker: Worker, message: Message) => {\r\n    if (!message || !message.type) {\r\n      return;\r\n    }\r\n\r\n    switch (message.type) {\r\n      case 'resolve':\r\n        this.#interruptBuffer = new Int32Array(message.data as SharedArrayBuffer);\r\n        this.resolve();\r\n        return;\r\n\r\n      case 'response':\r\n        this.resolveResponse(message as Response);\r\n        return;\r\n\r\n      case 'system':\r\n        this.systemQueue.put(message.data as Message);\r\n        return;\r\n\r\n      default:\r\n        this.outputQueue.put(message);\r\n        return;\r\n\r\n      case 'sync-request': {\r\n        const msg = message as SyncRequest;\r\n        const payload = msg.data.msg;\r\n        const reqData = msg.data.reqData;\r\n\r\n        switch (payload.type) {\r\n          case 'read': {\r\n            const response = await this.inputQueue.get();\r\n            await syncResponse(worker, reqData, response);\r\n            break;\r\n          }\r\n          default:\r\n            throw new WebRChannelError(`Unsupported request type '${payload.type}'.`);\r\n        }\r\n        return;\r\n      }\r\n      case 'request':\r\n        throw new WebRChannelError(\r\n          \"Can't send messages of type 'request' from a worker. Please Use 'sync-request' instead.\"\r\n        );\r\n    }\r\n  };\r\n}\r\n\r\n// Worker --------------------------------------------------------------\r\n\r\nimport { SyncTask, setInterruptHandler, setInterruptBuffer } from './task-worker';\r\nimport { Module } from '../emscripten';\r\n\r\nexport class SharedBufferChannelWorker implements ChannelWorker {\r\n  #ep: Endpoint;\r\n  #dispatch: (msg: Message) => void = () => 0;\r\n  #interruptBuffer = new Int32Array(new SharedArrayBuffer(4));\r\n  #interrupt = () => { return; };\r\n  onMessageFromMainThread: (msg: Message) => void = () => { return; };\r\n\r\n  constructor() {\r\n    this.#ep = (IN_NODE ? require('worker_threads').parentPort : globalThis) as Endpoint;\r\n    setInterruptBuffer(this.#interruptBuffer.buffer);\r\n    setInterruptHandler(() => this.handleInterrupt());\r\n  }\r\n\r\n  resolve() {\r\n    this.write({ type: 'resolve', data: this.#interruptBuffer.buffer });\r\n  }\r\n\r\n  write(msg: Message, transfer?: [Transferable]) {\r\n    this.#ep.postMessage(msg, transfer);\r\n  }\r\n\r\n  writeSystem(msg: Message, transfer?: [Transferable]) {\r\n    this.#ep.postMessage({ type: 'system', data: msg }, transfer);\r\n  }\r\n\r\n  read(): Message {\r\n    const msg = { type: 'read' } as Message;\r\n    const task = new SyncTask(this.#ep, msg);\r\n    return task.syncify() as Message;\r\n  }\r\n\r\n  inputOrDispatch(): number {\r\n    for (; ;) {\r\n      const msg = this.read();\r\n      if (msg.type === 'stdin') {\r\n        return Module.allocateUTF8(msg.data as string);\r\n      }\r\n      this.#dispatch(msg);\r\n    }\r\n  }\r\n\r\n  run(args: string[]) {\r\n    try{\r\n      Module.callMain(args);\r\n    } catch (e) {\r\n      if (e instanceof WebAssembly.RuntimeError) {\r\n        this.writeSystem({ type: 'console.error', data: e.message });\r\n        this.writeSystem({\r\n          type: 'console.error',\r\n          data: \"An unrecoverable WebAssembly error has occurred, the webR worker will be closed.\",\r\n        });\r\n        this.writeSystem({ type: 'close' });\r\n      }\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  setInterrupt(interrupt: () => void) {\r\n    this.#interrupt = interrupt;\r\n  }\r\n\r\n  handleInterrupt() {\r\n    if (this.#interruptBuffer[0] !== 0) {\r\n      this.#interruptBuffer[0] = 0;\r\n      this.#interrupt();\r\n    }\r\n  }\r\n\r\n  setDispatchHandler(dispatch: (msg: Message) => void) {\r\n    this.#dispatch = dispatch;\r\n  }\r\n}\r\n", "import { promiseHandles, newCrossOriginWorker, isCrossOrigin } from '../utils';\r\nimport {\r\n  Message,\r\n  newRequest,\r\n  Response,\r\n  Request,\r\n  newResponse,\r\n} from './message';\r\nimport { encode, decode } from '@msgpack/msgpack';\r\nimport { Endpoint } from './task-common';\r\nimport { ChannelMain, ChannelWorker } from './channel';\r\nimport { ChannelType } from './channel-common';\r\nimport { WebROptions } from '../webr-main';\r\nimport { WebRChannelError, WebRWorkerError } from '../error';\r\n\r\nimport { IN_NODE } from '../compat';\r\nimport type { Worker as NodeWorker } from 'worker_threads';\r\nif (IN_NODE) {\r\n  (globalThis as any).Worker = require('worker_threads').Worker as NodeWorker;\r\n}\r\n\r\n// Main ----------------------------------------------------------------\r\n\r\nexport class ServiceWorkerChannelMain extends ChannelMain {\r\n  initialised: Promise<unknown>;\r\n\r\n  resolve: (_?: unknown) => void;\r\n  reject: (message: string | Error) => void;\r\n  close = () => { return; };\r\n\r\n  #syncMessageCache = new Map<string, Message>();\r\n  #registration?: ServiceWorkerRegistration;\r\n  #interrupted = false;\r\n\r\n  constructor(config: Required<WebROptions>) {\r\n    super();\r\n    ({ resolve: this.resolve, reject: this.reject, promise: this.initialised } = promiseHandles());\r\n\r\n    console.warn(\r\n      \"The ServiceWorker communication channel is deprecated and will be removed in a future version of webR. \" +\r\n      \"Consider using the PostMessage channel instead. If blocking input is required (for example, `browser()`) \" +\r\n      \"the SharedArrayBuffer channel should be used. See https://docs.r-wasm.org/webr/latest/serving.html for further information.\"\r\n    );\r\n    const initWorker = (worker: Worker) => {\r\n      this.#handleEventsFromWorker(worker);\r\n      this.close = () => {\r\n        worker.terminate();\r\n        this.putClosedMessage();\r\n      };\r\n      void this.#registerServiceWorker(`${config.serviceWorkerUrl}webr-serviceworker.js`)\r\n        .then(\r\n          (clientId) => {\r\n            const msg = {\r\n              type: 'init',\r\n              data: {\r\n                config,\r\n                channelType: ChannelType.ServiceWorker,\r\n                clientId,\r\n                location: window.location.href,\r\n              },\r\n            } as Message;\r\n            worker.postMessage(msg);\r\n          }\r\n        );\r\n    };\r\n\r\n    if (isCrossOrigin(config.serviceWorkerUrl)) {\r\n      newCrossOriginWorker(\r\n        `${config.baseUrl}webr-worker.js`,\r\n        (worker: Worker) => initWorker(worker),\r\n        (error: Error) => {\r\n          this.reject(new WebRWorkerError(`Worker loading error: ${error.message}`));\r\n        }\r\n      );\r\n    } else {\r\n      const worker = new Worker(`${config.serviceWorkerUrl}webr-worker.js`);\r\n      initWorker(worker);\r\n    }\r\n  }\r\n\r\n  activeRegistration(): ServiceWorker {\r\n    if (!this.#registration?.active) {\r\n      throw new WebRChannelError('Attempted to obtain a non-existent active registration.');\r\n    }\r\n    return this.#registration.active;\r\n  }\r\n\r\n  interrupt() {\r\n    this.#interrupted = true;\r\n  }\r\n\r\n  async #registerServiceWorker(url: string): Promise<string> {\r\n    // Register service worker\r\n    this.#registration = await navigator.serviceWorker.register(url);\r\n    await navigator.serviceWorker.ready;\r\n    window.addEventListener('beforeunload', () => {\r\n      void this.#registration?.unregister();\r\n    });\r\n\r\n    // Ensure we can communicate with service worker and we have a client ID\r\n    const clientId = await new Promise<string>((resolve) => {\r\n      navigator.serviceWorker.addEventListener(\r\n        'message',\r\n        function listener(event: MessageEvent<{ type: string; clientId: string }>) {\r\n          if (event.data.type === 'registration-successful') {\r\n            navigator.serviceWorker.removeEventListener('message', listener);\r\n            resolve(event.data.clientId);\r\n          }\r\n        }\r\n      );\r\n      this.activeRegistration().postMessage({ type: 'register-client-main' });\r\n    });\r\n\r\n    // Setup listener for service worker messages\r\n    navigator.serviceWorker.addEventListener('message', (event: MessageEvent<Request>) => {\r\n      void this.#onMessageFromServiceWorker(event);\r\n    });\r\n    return clientId;\r\n  }\r\n\r\n  async #onMessageFromServiceWorker(event: MessageEvent<Message>) {\r\n    if (event.data.type === 'request') {\r\n      const uuid = event.data.data as string;\r\n      const message = this.#syncMessageCache.get(uuid);\r\n      if (!message) {\r\n        throw new WebRChannelError('Request not found during service worker XHR request');\r\n      }\r\n      this.#syncMessageCache.delete(uuid);\r\n      switch (message.type) {\r\n        case 'read': {\r\n          const response = await this.inputQueue.get();\r\n          this.activeRegistration().postMessage({\r\n            type: 'wasm-webr-fetch-response',\r\n            uuid: uuid,\r\n            response: newResponse(uuid, response),\r\n          });\r\n          break;\r\n        }\r\n        case 'interrupt': {\r\n          const response = this.#interrupted;\r\n          this.activeRegistration().postMessage({\r\n            type: 'wasm-webr-fetch-response',\r\n            uuid: uuid,\r\n            response: newResponse(uuid, response),\r\n          });\r\n          this.inputQueue.reset();\r\n          this.#interrupted = false;\r\n          break;\r\n        }\r\n        default:\r\n          throw new WebRChannelError(`Unsupported request type '${message.type}'.`);\r\n      }\r\n      return;\r\n    }\r\n  }\r\n\r\n  #handleEventsFromWorker(worker: Worker) {\r\n    if (IN_NODE) {\r\n      (worker as unknown as NodeWorker).on('message', (message: Message) => {\r\n        this.#onMessageFromWorker(worker, message);\r\n      });\r\n      (worker as unknown as NodeWorker).on('error', (ev: Event) => {\r\n        console.error(ev);\r\n        this.reject(new WebRWorkerError(\r\n          \"An error occurred initialising the webR ServiceWorkerChannel worker.\"\r\n        ));\r\n      });\r\n    } else {\r\n      worker.onmessage = (ev: MessageEvent) =>\r\n        this.#onMessageFromWorker(worker, ev.data as Message);\r\n      worker.onerror = (ev) => {\r\n        console.error(ev);\r\n        this.reject(new WebRWorkerError(\r\n          \"An error occurred initialising the webR ServiceWorkerChannel worker.\"\r\n        ));\r\n      };\r\n    }\r\n  }\r\n\r\n  #onMessageFromWorker = (worker: Worker, message: Message) => {\r\n    if (!message || !message.type) {\r\n      return;\r\n    }\r\n\r\n    switch (message.type) {\r\n      case 'resolve':\r\n        this.resolve();\r\n        return;\r\n\r\n      case 'response':\r\n        this.resolveResponse(message as Response);\r\n        return;\r\n\r\n      case 'system':\r\n        this.systemQueue.put(message.data as Message);\r\n        return;\r\n\r\n      default:\r\n        this.outputQueue.put(message);\r\n        return;\r\n\r\n      case 'sync-request': {\r\n        const request = message.data as Request;\r\n        this.#syncMessageCache.set(request.data.uuid, request.data.msg);\r\n        return;\r\n      }\r\n\r\n      case 'request':\r\n        throw new WebRChannelError(\r\n          \"Can't send messages of type 'request' from a worker.\" +\r\n          'Use service worker fetch request instead.'\r\n        );\r\n    }\r\n  };\r\n}\r\n\r\n// Worker --------------------------------------------------------------\r\n\r\nimport { Module } from '../emscripten';\r\n\r\nexport class ServiceWorkerChannelWorker implements ChannelWorker {\r\n  #ep: Endpoint;\r\n  #mainThreadId: string;\r\n  #location: string;\r\n  #lastInterruptReq = Date.now();\r\n  #dispatch: (msg: Message) => void = () => 0;\r\n  #interrupt = () => { return; };\r\n  onMessageFromMainThread: (msg: Message) => void = () => { return; };\r\n\r\n  constructor(data: { clientId?: string; location?: string }) {\r\n    if (!data.clientId || !data.location) {\r\n      throw new WebRChannelError(\"Can't start service worker channel\");\r\n    }\r\n    this.#mainThreadId = data.clientId;\r\n    this.#location = data.location;\r\n    this.#ep = (IN_NODE ? require('worker_threads').parentPort : globalThis) as Endpoint;\r\n  }\r\n\r\n  resolve() {\r\n    this.write({ type: 'resolve' });\r\n  }\r\n\r\n  write(msg: Message, transfer?: [Transferable]) {\r\n    this.#ep.postMessage(msg, transfer);\r\n  }\r\n\r\n  writeSystem(msg: Message, transfer?: [Transferable]) {\r\n    this.#ep.postMessage({ type: 'system', data: msg }, transfer);\r\n  }\r\n\r\n  syncRequest(message: Message): Response {\r\n    /*\r\n     * Browsers timeout service workers after about 5 minutes on inactivity.\r\n     * See e.g. service_worker_version.cc in Chromium.\r\n     *\r\n     * To avoid the service worker being shut down, we timeout our XHR after\r\n     * 1 minute and then resend the request as a keep-alive. The service worker\r\n     * uses the message UUID to identify the request and continue waiting for a\r\n     * response from where it left off.\r\n     */\r\n    const request = newRequest(message);\r\n    this.write({ type: 'sync-request', data: request });\r\n\r\n    let retryCount = 0;\r\n    for (; ;) {\r\n      try {\r\n        const url = new URL('__wasm__/webr-fetch-request/', this.#location);\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.timeout = 60000;\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.open('POST', url, false);\r\n        const fetchReqBody = {\r\n          clientId: this.#mainThreadId,\r\n          uuid: request.data.uuid,\r\n        };\r\n        xhr.send(encode(fetchReqBody));\r\n        return decode(xhr.response as ArrayBuffer) as Response;\r\n      } catch (e: any) {\r\n        if (e instanceof DOMException && retryCount++ < 1000) {\r\n          console.log('Service worker request failed - resending request');\r\n        } else {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  read(): Message {\r\n    const response = this.syncRequest({ type: 'read' });\r\n    return response.data.resp as Message;\r\n  }\r\n\r\n  inputOrDispatch(): number {\r\n    for (; ;) {\r\n      const msg = this.read();\r\n      if (msg.type === 'stdin') {\r\n        return Module.allocateUTF8(msg.data as string);\r\n      }\r\n      this.#dispatch(msg);\r\n    }\r\n  }\r\n\r\n  run(args: string[]) {\r\n    try{\r\n      Module.callMain(args);\r\n    } catch (e) {\r\n      if (e instanceof WebAssembly.RuntimeError) {\r\n        this.writeSystem({ type: 'console.error', data: e.message });\r\n        this.writeSystem({\r\n          type: 'console.error',\r\n          data: \"An unrecoverable WebAssembly error has occurred, the webR worker will be closed.\",\r\n        });\r\n        this.writeSystem({ type: 'close' });\r\n      }\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  setInterrupt(interrupt: () => void) {\r\n    this.#interrupt = interrupt;\r\n  }\r\n\r\n  handleInterrupt() {\r\n    /* During R computation we have no way to directly interrupt the worker\r\n     * thread. Instead, we hook into R's PolledEvents. Since we are not using\r\n     * SharedArrayBuffer as a signal method, we instead send a message to the\r\n     * main thread to ask if we should interrupt R.\r\n     *\r\n     * The rate of requests is limited to once per second. This stops the\r\n     * browser being overloaded with XHR sync requests while R is working.\r\n     */\r\n    if (Date.now() > this.#lastInterruptReq + 1000) {\r\n      this.#lastInterruptReq = Date.now();\r\n      const response = this.syncRequest({ type: 'interrupt' });\r\n      const interrupted = response.data.resp as boolean;\r\n      if (interrupted) {\r\n        this.#interrupt();\r\n      }\r\n    }\r\n  }\r\n\r\n  setDispatchHandler(dispatch: (msg: Message) => void) {\r\n    this.#dispatch = dispatch;\r\n  }\r\n}\r\n", "import { promiseHandles, ResolveFn, newCrossOriginWorker, isCrossOrigin } from '../utils';\r\nimport { Message, newRequest, Response, Request, newResponse } from './message';\r\nimport { Endpoint } from './task-common';\r\nimport { ChannelType } from './channel-common';\r\nimport { WebROptions } from '../webr-main';\r\nimport { ChannelMain } from './channel';\r\nimport { WebRChannelError, WebRWorkerError } from '../error';\r\n\r\nimport { IN_NODE } from '../compat';\r\nimport type { Worker as NodeWorker } from 'worker_threads';\r\nif (IN_NODE) {\r\n  (globalThis as any).Worker = require('worker_threads').Worker as NodeWorker;\r\n}\r\n\r\n// Main ----------------------------------------------------------------\r\n\r\nexport class PostMessageChannelMain extends ChannelMain {\r\n\r\n  initialised: Promise<unknown>;\r\n  resolve: (_?: unknown) => void;\r\n  reject: (message: string | Error) => void;\r\n  close: () => void = () => { return; };\r\n  #worker?: Worker;\r\n\r\n  constructor(config: Required<WebROptions>) {\r\n    super();\r\n    ({ resolve: this.resolve, reject: this.reject, promise: this.initialised } = promiseHandles());\r\n\r\n    const initWorker = (worker: Worker) => {\r\n      this.#worker = worker;\r\n      this.#handleEventsFromWorker(worker);\r\n      this.close = () => {\r\n        worker.terminate();\r\n        this.putClosedMessage();\r\n      };\r\n      const msg = {\r\n        type: 'init',\r\n        data: { config, channelType: ChannelType.PostMessage },\r\n      } as Message;\r\n      worker.postMessage(msg);\r\n    };\r\n\r\n    if (isCrossOrigin(config.baseUrl)) {\r\n      newCrossOriginWorker(\r\n        `${config.baseUrl}webr-worker.js`,\r\n        (worker: Worker) => initWorker(worker),\r\n        (error: Error) => {\r\n          this.reject(new WebRWorkerError(`Worker loading error: ${error.message}`));\r\n        }\r\n      );\r\n    } else {\r\n      const worker = new Worker(`${config.baseUrl}webr-worker.js`);\r\n      initWorker(worker);\r\n    }\r\n  }\r\n\r\n  interrupt() {\r\n    console.error('Interrupting R execution is not available when using the PostMessage channel');\r\n  }\r\n\r\n  #handleEventsFromWorker(worker: Worker) {\r\n    if (IN_NODE) {\r\n      (worker as unknown as NodeWorker).on('message', (message: Message) => {\r\n        void this.#onMessageFromWorker(worker, message);\r\n      });\r\n      (worker as unknown as NodeWorker).on('error', (ev: Event) => {\r\n        console.error(ev);\r\n        this.reject(new WebRWorkerError(\r\n          \"An error occurred initialising the webR PostMessageChannel worker.\"\r\n        ));\r\n      });\r\n    } else {\r\n      worker.onmessage = (ev: MessageEvent) =>\r\n        this.#onMessageFromWorker(worker, ev.data as Message);\r\n      worker.onerror = (ev) => {\r\n        console.error(ev);\r\n        this.reject(new WebRWorkerError(\r\n          \"An error occurred initialising the webR PostMessageChannel worker.\"\r\n        ));\r\n      };\r\n    }\r\n  }\r\n\r\n  #onMessageFromWorker = async (worker: Worker, message: Message) => {\r\n    if (!message || !message.type) {\r\n      return;\r\n    }\r\n\r\n    switch (message.type) {\r\n      case 'resolve':\r\n        this.resolve();\r\n        return;\r\n\r\n      case 'response':\r\n        this.resolveResponse(message as Response);\r\n        return;\r\n\r\n      case 'system':\r\n        this.systemQueue.put(message.data as Message);\r\n        return;\r\n\r\n      default:\r\n        this.outputQueue.put(message);\r\n        return;\r\n\r\n      case 'request': {\r\n        const msg = message as Request;\r\n        const payload = msg.data.msg;\r\n\r\n        switch (payload.type) {\r\n          case 'read': {\r\n            const input = await this.inputQueue.get();\r\n            if (this.#worker) {\r\n              const response = newResponse(msg.data.uuid, input);\r\n              this.#worker.postMessage(response);\r\n            }\r\n            break;\r\n          }\r\n          default:\r\n            throw new WebRChannelError(`Unsupported request type '${payload.type}'.`);\r\n        }\r\n        return;\r\n      }\r\n\r\n      case 'sync-request':\r\n        throw new WebRChannelError(\r\n          \"Can't send messages of type 'sync-request' in PostMessage mode. Use 'request' instead.\"\r\n        );\r\n    }\r\n  };\r\n}\r\n\r\n// Worker --------------------------------------------------------------\r\n\r\nimport { Module as _Module } from '../emscripten';\r\n\r\ndeclare let Module: _Module;\r\n\r\nexport class PostMessageChannelWorker {\r\n  #ep: Endpoint;\r\n  #parked = new Map<string, ResolveFn>();\r\n  #dispatch: (msg: Message) => void = () => 0;\r\n  #promptDepth = 0;\r\n\r\n  constructor() {\r\n    this.#ep = (IN_NODE ? require('worker_threads').parentPort : globalThis) as Endpoint;\r\n  }\r\n\r\n  resolve() {\r\n    this.write({ type: 'resolve' });\r\n  }\r\n\r\n  write(msg: Message, transfer?: [Transferable]) {\r\n    this.#ep.postMessage(msg, transfer);\r\n  }\r\n\r\n  writeSystem(msg: Message, transfer?: [Transferable]) {\r\n    this.#ep.postMessage({ type: 'system', data: msg }, transfer);\r\n  }\r\n\r\n  read(): Message {\r\n    throw new WebRChannelError(\r\n      'Unable to synchronously read when using the `PostMessage` channel.'\r\n    );\r\n  }\r\n\r\n  inputOrDispatch(): number {\r\n    if (this.#promptDepth > 0) {\r\n      this.#promptDepth = 0;\r\n      const msg = Module.allocateUTF8OnStack(\r\n        \"Can't block for input when using the PostMessage communication channel.\"\r\n      );\r\n      Module._Rf_error(msg);\r\n    }\r\n    this.#promptDepth++;\r\n    // Unable to block, so just return a NULL\r\n    return 0;\r\n  }\r\n\r\n  run(_args: string[]) {\r\n    const args: string[] = _args || [];\r\n    args.unshift('R');\r\n    const argc = args.length;\r\n    const argv = Module._malloc(4 * (argc + 1));\r\n    args.forEach((arg, idx) => {\r\n      const argvPtr = argv + 4 * idx;\r\n      const argPtr = Module.allocateUTF8(arg);\r\n      Module.setValue(argvPtr, argPtr, '*');\r\n    });\r\n\r\n    this.writeSystem({\r\n      type: 'console.warn',\r\n      data: 'WebR is using `PostMessage` communication channel, nested R REPLs are not available.',\r\n    });\r\n\r\n    Module._Rf_initialize_R(argc, argv);\r\n    Module._setup_Rmainloop();\r\n    Module._R_ReplDLLinit();\r\n    Module._R_ReplDLLdo1();\r\n    void this.#asyncREPL();\r\n  }\r\n\r\n  setDispatchHandler(dispatch: (msg: Message) => void) {\r\n    this.#dispatch = dispatch;\r\n  }\r\n\r\n  async request(msg: Message, transferables?: [Transferable]): Promise<any> {\r\n    const req = newRequest(msg, transferables);\r\n\r\n    const { resolve: resolve, promise: prom } = promiseHandles();\r\n    this.#parked.set(req.data.uuid, resolve);\r\n\r\n    this.write(req);\r\n    return prom;\r\n  }\r\n\r\n  setInterrupt() { return; }\r\n  handleInterrupt() { return; }\r\n\r\n  onMessageFromMainThread(message: Message) {\r\n    const msg = message as Response;\r\n    const uuid = msg.data.uuid;\r\n    const resolve = this.#parked.get(uuid);\r\n\r\n    if (resolve) {\r\n      this.#parked.delete(uuid);\r\n      resolve(msg.data.resp);\r\n    } else {\r\n      console.warn(\"Can't find request.\");\r\n    }\r\n  }\r\n\r\n  /*\r\n   * This is a fallback REPL for webR running in PostMessage mode. The prompt\r\n   * section of R's R_ReplDLLdo1 returns empty with -1, which allows this\r\n   * fallback REPL to yield to the event loop with await.\r\n   *\r\n   * The drawback of this approach is that nested REPLs do not work, such as\r\n   * readline, browser or menu. Attempting to use a nested REPL prints an error\r\n   * to the JS console.\r\n   *\r\n   * R/Wasm errors during execution are caught and the REPL is restarted at the\r\n   * top level. Any other JS errors are re-thrown.\r\n   */\r\n  #asyncREPL = async () => {\r\n    for (; ;) {\r\n      try {\r\n        this.#promptDepth = 0;\r\n        const msg = (await this.request({ type: 'read' })) as Message;\r\n        if (msg.type === 'stdin') {\r\n          // Copy the new input into WASM memory\r\n          const str = Module.allocateUTF8(msg.data as string);\r\n          Module._strcpy(Module._DLLbuf, str);\r\n          Module.setValue(Module._DLLbufp, Module._DLLbuf, '*');\r\n          Module._free(str);\r\n\r\n          // Execute the R code using a single step of R's built in REPL\r\n          try {\r\n            while (Module._R_ReplDLLdo1() > 0);\r\n          } catch (e: any) {\r\n            if (e instanceof (WebAssembly as any).Exception) {\r\n              // R error: clear command buffer and reproduce prompt\r\n              Module._R_ReplDLLinit();\r\n              Module._R_ReplDLLdo1();\r\n            } else {\r\n              throw e;\r\n            }\r\n          }\r\n        } else {\r\n          this.#dispatch(msg);\r\n        }\r\n      } catch (e) {\r\n        // Close on unrecoverable error\r\n        if (e instanceof WebAssembly.RuntimeError) {\r\n          this.writeSystem({ type: 'console.error', data: e.message });\r\n          this.writeSystem({\r\n            type: 'console.error',\r\n            data: \"An unrecoverable WebAssembly error has occurred, the webR worker will be closed.\",\r\n          });\r\n          this.writeSystem({ type: 'close' });\r\n        }\r\n        // Don't break the REPL loop on other Wasm `Exception` errors\r\n        if (!(e instanceof (WebAssembly as any).Exception)) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n", "import { SharedBufferChannelMain, SharedBufferChannelWorker } from './channel-shared';\r\nimport { ServiceWorkerChannelMain, ServiceWorkerChannelWorker } from './channel-service';\r\nimport { PostMessageChannelMain, PostMessageChannelWorker } from './channel-postmessage';\r\nimport { WebROptions } from '../webr-main';\r\nimport { WebRChannelError } from '../error';\r\n\r\n// This file refers to objects imported from `./channel-shared` and\r\n// `./channel-service.` These can't be included in `./channel` as this\r\n// causes a circular dependency issue.\r\n\r\nexport const ChannelType = {\r\n  Automatic: 0,\r\n  SharedArrayBuffer: 1,\r\n  ServiceWorker: 2,\r\n  PostMessage: 3,\r\n} as const;\r\n\r\nexport type ChannelInitMessage = {\r\n  type: string;\r\n  data: {\r\n    config: Required<WebROptions>;\r\n    channelType: Exclude<\r\n      (typeof ChannelType)[keyof typeof ChannelType],\r\n      typeof ChannelType.Automatic\r\n    >;\r\n    clientId?: string;\r\n    location?: string;\r\n  };\r\n};\r\n\r\nexport function newChannelMain(data: Required<WebROptions>) {\r\n  switch (data.channelType) {\r\n    case ChannelType.SharedArrayBuffer:\r\n      return new SharedBufferChannelMain(data);\r\n    case ChannelType.ServiceWorker:\r\n      return new ServiceWorkerChannelMain(data);\r\n    case ChannelType.PostMessage:\r\n      return new PostMessageChannelMain(data);\r\n    case ChannelType.Automatic:\r\n    default:\r\n      if (typeof SharedArrayBuffer !== 'undefined') {\r\n        return new SharedBufferChannelMain(data);\r\n      } else {\r\n        return new PostMessageChannelMain(data);\r\n      }\r\n  }\r\n}\r\n\r\nexport function newChannelWorker(msg: ChannelInitMessage) {\r\n  switch (msg.data.channelType) {\r\n    case ChannelType.SharedArrayBuffer:\r\n      return new SharedBufferChannelWorker();\r\n    case ChannelType.ServiceWorker:\r\n      return new ServiceWorkerChannelWorker(msg.data);\r\n    case ChannelType.PostMessage:\r\n      return new PostMessageChannelWorker();\r\n    default:\r\n      throw new WebRChannelError('Unknown worker channel type received');\r\n  }\r\n}\r\n", "import { IN_NODE } from './compat';\r\n\r\nexport const BASE_URL = IN_NODE ? __dirname + '/' : './';\r\nexport const PKG_BASE_URL = 'https://repo.r-wasm.org';\r\nexport const WEBR_VERSION = '0.5.3-dev';", "/**\r\n * Module for working with R objects on the main thead through\r\n * JavaScript proxies. The `RObject` types in `RMain` are aliases for\r\n * proxies to the corresponding types in `RWorker`. For instance,\r\n * `RMain.RCharacter` is an alias for `RMain.RProxy<RWorker.RCharacter>`.\r\n * The proxies automatically and asynchronously forward method and\r\n * getter calls to the implementations on the R worker side.\r\n * @module RMain\r\n */\r\nimport type { RProxy } from './proxy';\r\nimport { isWebRPayloadPtr } from './payload';\r\nimport * as RWorker from './robj-worker';\r\n\r\n// RProxy<RWorker.RObject> type aliases\r\nexport type RObject = RProxy<RWorker.RObject>;\r\nexport type RNull = RProxy<RWorker.RNull>;\r\nexport type RSymbol = RProxy<RWorker.RSymbol>;\r\nexport type RPairlist = RProxy<RWorker.RPairlist>;\r\nexport type REnvironment = RProxy<RWorker.REnvironment>;\r\nexport type RString = RProxy<RWorker.RString>;\r\nexport type RLogical = RProxy<RWorker.RLogical>;\r\nexport type RInteger = RProxy<RWorker.RInteger>;\r\nexport type RDouble = RProxy<RWorker.RDouble>;\r\nexport type RComplex = RProxy<RWorker.RComplex>;\r\nexport type RCharacter = RProxy<RWorker.RCharacter>;\r\nexport type RList = RProxy<RWorker.RList>;\r\nexport type RDataFrame = RProxy<RWorker.RDataFrame>;\r\nexport type RRaw = RProxy<RWorker.RRaw>;\r\nexport type RCall = RProxy<RWorker.RCall>;\r\n// RFunction proxies are callable\r\nexport type RFunction = RProxy<RWorker.RFunction> & ((...args: unknown[]) => Promise<unknown>);\r\n\r\n/**\r\n * Test for an RObject instance\r\n *\r\n * RObject is the user facing interface to R objects.\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RObject.\r\n */\r\nexport function isRObject(value: any): value is RObject {\r\n  return (\r\n    !!value &&\r\n    (typeof value === 'object' || typeof value === 'function') &&\r\n    'payloadType' in value &&\r\n    isWebRPayloadPtr(value._payload)\r\n  );\r\n}\r\n\r\n/**\r\n * Test for an RNull instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RNull.\r\n */\r\nexport function isRNull(value: any): value is RNull {\r\n  return isRObject(value) && value._payload.obj.type === 'null';\r\n}\r\n\r\n/**\r\n * Test for an RSymbol instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RSymbol.\r\n */\r\nexport function isRSymbol(value: any): value is RSymbol {\r\n  return isRObject(value) && value._payload.obj.type === 'symbol';\r\n}\r\n\r\n/**\r\n * Test for an RPairlist instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RPairlist.\r\n */\r\nexport function isRPairlist(value: any): value is RPairlist {\r\n  return isRObject(value) && value._payload.obj.type === 'pairlist';\r\n}\r\n\r\n/**\r\n * Test for an REnvironment instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an REnvironment.\r\n */\r\nexport function isREnvironment(value: any): value is REnvironment {\r\n  return isRObject(value) && value._payload.obj.type === 'environment';\r\n}\r\n\r\n/**\r\n * Test for an RLogical instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RLogical.\r\n */\r\nexport function isRLogical(value: any): value is RLogical {\r\n  return isRObject(value) && value._payload.obj.type === 'logical';\r\n}\r\n\r\n/**\r\n * Test for an RInteger instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RInteger.\r\n */\r\nexport function isRInteger(value: any): value is RInteger {\r\n  return isRObject(value) && value._payload.obj.type === 'integer';\r\n}\r\n\r\n/**\r\n * Test for an RDouble instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RDouble.\r\n */\r\nexport function isRDouble(value: any): value is RDouble {\r\n  return isRObject(value) && value._payload.obj.type === 'double';\r\n}\r\n\r\n/**\r\n * Test for an RComplex instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RComplex.\r\n */\r\nexport function isRComplex(value: any): value is RComplex {\r\n  return isRObject(value) && value._payload.obj.type === 'complex';\r\n}\r\n\r\n/**\r\n * Test for an RCharacter instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RCharacter.\r\n */\r\nexport function isRCharacter(value: any): value is RCharacter {\r\n  return isRObject(value) && value._payload.obj.type === 'character';\r\n}\r\n\r\n/**\r\n * Test for an RList instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RList.\r\n */\r\nexport function isRList(value: any): value is RList {\r\n  return isRObject(value) && value._payload.obj.type === 'list';\r\n}\r\n\r\n/**\r\n * Test for an RRaw instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RRaw.\r\n */\r\nexport function isRRaw(value: any): value is RRaw {\r\n  return isRObject(value) && value._payload.obj.type === 'raw';\r\n}\r\n\r\n/**\r\n * Test for an RCall instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RCall.\r\n */\r\nexport function isRCall(value: any): value is RCall {\r\n  return isRObject(value) && value._payload.obj.type === 'call';\r\n}\r\n\r\n/**\r\n * Test for an RFunction instance\r\n * @param {any} value The object to test.\r\n * @returns {boolean} True if the object is an instance of an RFunction.\r\n */\r\nexport function isRFunction(value: any): value is RFunction {\r\n  return Boolean(isRObject(value) && value._payload.obj.methods?.includes('exec'));\r\n}\r\n", "/**\r\n * Proxy R objects on the webR worker thread so that they can be accessed from\r\n * the main thread.\r\n * @module Proxy\r\n */\r\nimport { ChannelMain } from './chan/channel';\r\nimport { replaceInObject } from './utils';\r\nimport { isWebRPayloadPtr, WebRPayloadPtr, WebRPayload } from './payload';\r\nimport { RType, RCtor, WebRData, WebRDataRaw } from './robj';\r\nimport { isRObject, RObject, isRFunction } from './robj-main';\r\nimport * as RWorker from './robj-worker';\r\nimport { ShelterID, CallRObjectMethodMessage, NewRObjectMessage } from './webr-chan';\r\nimport type * as Payload from './payload';\r\nimport { WebRError, WebRPayloadError } from './error';\r\n\r\n/**\r\n * Obtain a union of the keys corresponding to methods of a given class `T`.\r\n * @typeParam T The type to provide the methods for.\r\n */\r\nexport type Methods<T> = {\r\n  [P in keyof T]: T[P] extends (...args: any) => any ? P : never;\r\n}[keyof T];\r\n\r\n/**\r\n * Distributive conditional type for {@link RProxy}.\r\n *\r\n * Distributes {@link RProxy} over any {@link RWorker.RObject} in the given\r\n * union type U.\r\n * @typeParam U The type union to distribute {@link RProxy} over.\r\n */\r\nexport type DistProxy<U> = U extends RWorker.RObject ? RProxy<U> : U;\r\n\r\n/**\r\n * Convert {@link RWorker.RObject} properties for use with an {@link RProxy}.\r\n *\r\n * Properties in the type parameter `T` are mapped so that {@link RProxy} is\r\n * distributed over any {@link RWorker.RObject} types, then wrapped in a\r\n * Promise.\r\n *\r\n * Function signatures are mapped so that arguments with {@link RWorker.RObject}\r\n * type instead take {@link RProxy}<{@link RWorker.RObject}> type. Other\r\n * function arguments remain as they are. The function return type is also\r\n * converted to a corresponding type using `RProxify` recursively.\r\n * @typeParam T The type to convert.\r\n */\r\nexport type RProxify<T> = T extends Array<any> // [RObject, RObject, ...]\r\n  ? Promise<DistProxy<T[0]>[]>\r\n  : T extends (...args: infer U) => any // (...args) => <RObject>\r\n  ? (\r\n    ...args: {\r\n      [V in keyof U]: DistProxy<U[V]>;\r\n    }\r\n  ) => RProxify<ReturnType<T>>\r\n  : T extends { result: RWorker.RObject, output: RWorker.RObject } // Return type of .capture()\r\n  ? Promise<{\r\n    [U in keyof T]: DistProxy<T[U]>\r\n  }>\r\n  : Promise<DistProxy<T>>; // RObject, any other types\r\n\r\n/**\r\n * Create an {@link RProxy} based on an {@link RWorker.RObject} type parameter.\r\n *\r\n * R objects created via an {@link RProxy} are intended to be used in place of\r\n * {@link RWorker.RObject} on the main thread. An {@link RProxy} object has the\r\n * same instance methods as the given {@link RWorker.RObject} parameter, with\r\n * the following differences:\r\n * - Method arguments take `RProxy` in place of {@link RWorker.RObject}.\r\n *\r\n * - Where an {@link RWorker.RObject} would be returned, an `RProxy` is\r\n *   returned instead.\r\n *\r\n * - All return types are wrapped in a Promise.\r\n *\r\n * If required, the {@link Payload.WebRPayloadPtr} object associated with the\r\n * proxy can be accessed directly through the `_payload` property.\r\n * @typeParam T The {@link RWorker.RObject} type to convert into `RProxy` type.\r\n */\r\nexport type RProxy<T extends RWorker.RObject> = { [P in Methods<T>]: RProxify<T[P]> } & {\r\n  _payload: WebRPayloadPtr;\r\n  [Symbol.asyncIterator](): AsyncGenerator<RProxy<RWorker.RObject>, void, unknown>;\r\n};\r\n\r\n/**\r\n * Create a proxy constructor based on a {@link RWorker.RObject} class.\r\n *\r\n * The class constructors and static methods of the given subclass of\r\n * {@link RWorker.RObject} are proxied, and the proxied constructor returns a\r\n * promise to an R object of a given {@link RProxy} type.\r\n * @typeParam T The type of the {@link RWorker.RObject} class to be proxied.\r\n * @typeParam R The type to be returned from the proxied class constructor.\r\n */\r\nexport type ProxyConstructor<T, R> = (T extends abstract new (...args: infer U) => any\r\n  ? {\r\n    new(\r\n      ...args: {\r\n        [V in keyof U]: U[V];\r\n      }\r\n    ): Promise<R>;\r\n  }\r\n  : never) & {\r\n    [P in Methods<typeof RWorker.RObject>]: RProxify<(typeof RWorker.RObject)[P]>;\r\n  };\r\n\r\n/* The empty function is used as base when we are proxying RFunction objects.\r\n * This enables function call semantics on the proxy using the apply hook.\r\n */\r\nfunction empty() { return; }\r\n\r\n/* Proxy the asyncIterator property for R objects with a length. This allows us\r\n * to use the `for await (i of obj){}` JavaScript syntax.\r\n */\r\nfunction targetAsyncIterator(chan: ChannelMain, proxy: RProxy<RWorker.RObject>) {\r\n  return async function* () {\r\n    // Get the R object's length\r\n    const msg: CallRObjectMethodMessage = {\r\n      type: 'callRObjectMethod',\r\n      data: {\r\n        payload: proxy._payload,\r\n        prop: 'getPropertyValue',\r\n        args: [{ payloadType: 'raw', obj: 'length' }],\r\n        shelter: undefined, // TODO\r\n      },\r\n    };\r\n    const reply = await chan.request(msg);\r\n\r\n    // Throw an error if there was some problem accessing the object length\r\n    if (typeof reply.obj !== 'number') {\r\n      throw new WebRError('Cannot iterate over object, unexpected type for length property.');\r\n    }\r\n\r\n    // Loop through the object and yield values\r\n    for (let i = 1; i <= reply.obj; i++) {\r\n      yield proxy.get(i);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Proxy an R object method by providing an async function that requests that\r\n * the worker thread calls the method and then returns the result.\r\n *\r\n * When the optional payload argument has not been provided, an\r\n * {@link RWorker.RObject} static method is called.\r\n * @internal\r\n */\r\nexport function targetMethod(chan: ChannelMain, prop: string): unknown;\r\nexport function targetMethod(chan: ChannelMain, prop: string, payload: WebRPayloadPtr): unknown;\r\nexport function targetMethod(chan: ChannelMain, prop: string, payload?: WebRPayloadPtr): unknown {\r\n  return async (..._args: WebRData[]) => {\r\n    const args = _args.map((arg) => {\r\n      if (isRObject(arg)) {\r\n        return arg._payload;\r\n      }\r\n      return {\r\n        obj: replaceInObject(arg, isRObject, (obj: RObject) => obj._payload),\r\n        payloadType: 'raw',\r\n      } as WebRPayload;\r\n    });\r\n\r\n    const msg: CallRObjectMethodMessage = {\r\n      type: 'callRObjectMethod',\r\n      data: { payload, prop, args: args },\r\n    };\r\n    const reply = await chan.request(msg);\r\n\r\n    switch (reply.payloadType) {\r\n      case 'ptr':\r\n        return newRProxy(chan, reply);\r\n      case 'raw': {\r\n        const proxyReply = replaceInObject(\r\n          reply,\r\n          isWebRPayloadPtr,\r\n          (obj: WebRPayloadPtr, chan: ChannelMain) => newRProxy(chan, obj),\r\n          chan\r\n        ) as WebRPayload;\r\n        return proxyReply.obj;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/* Proxy the `RWorker` class constructors. This allows us to create a new R\r\n * object on the worker thread from a given JS object.\r\n */\r\nasync function newRObject(\r\n  chan: ChannelMain,\r\n  objType: RType | RCtor,\r\n  shelter: ShelterID,\r\n  ...args: WebRData[]\r\n) {\r\n  const msg: NewRObjectMessage = {\r\n    type: 'newRObject',\r\n    data: {\r\n      objType,\r\n      args: replaceInObject<WebRData[]>(args, isRObject, (obj: RObject) => obj._payload),\r\n      shelter: shelter,\r\n    },\r\n  };\r\n  const payload = await chan.request(msg);\r\n  switch (payload.payloadType) {\r\n    case 'raw':\r\n      throw new WebRPayloadError('Unexpected raw payload type returned from newRObject');\r\n    case 'ptr':\r\n      return newRProxy(chan, payload);\r\n  }\r\n}\r\n\r\n/**\r\n * Proxy an R object.\r\n *\r\n * The proxy targets a particular R object in WebAssembly memory. Methods of the\r\n * relevant subclass of {@link RWorker.RObject} are proxied, enabling\r\n * structured manipulation of R objects from the main thread.\r\n * @param {ChannelMain} chan The current main thread communication channel.\r\n * @param {WebRPayloadPtr} payload A webR payload referencing an R object.\r\n * @returns {RProxy<RWorker.RObject>} An {@link RObject} corresponding to the\r\n * referenced R object.\r\n */\r\nexport function newRProxy(chan: ChannelMain, payload: WebRPayloadPtr): RProxy<RWorker.RObject> {\r\n  const proxy = new Proxy(\r\n    // Assume we are proxying an RFunction if the methods list contains 'exec'.\r\n    payload.obj.methods?.includes('exec') ? Object.assign(empty, { ...payload }) : payload,\r\n    {\r\n      get: (_: WebRPayload, prop: string | number | symbol) => {\r\n        if (prop === '_payload') {\r\n          return payload;\r\n        } else if (prop === Symbol.asyncIterator) {\r\n          return targetAsyncIterator(chan, proxy);\r\n        } else if (payload.obj.methods?.includes(prop.toString())) {\r\n          return targetMethod(chan, prop.toString(), payload);\r\n        }\r\n      },\r\n      apply: async (_: WebRPayload, _thisArg, args: (WebRDataRaw | RProxy<RWorker.RObject>)[]) => {\r\n        const res = await (newRProxy(chan, payload) as RProxy<RWorker.RFunction>).exec(...args);\r\n        return isRFunction(res) ? res : res.toJs();\r\n      },\r\n    }\r\n  ) as unknown as RProxy<RWorker.RObject>;\r\n  return proxy;\r\n}\r\n\r\n/**\r\n * Proxy an {@link RWorker.RObject} class.s\r\n * @param {ChannelMain} chan The current main thread communication channel.\r\n * @param {ShelterID} shelter The shelter ID to protect returned objects with.\r\n * @param {(RType | RCtor)} objType The R object type or class, `'object'` for\r\n * the generic {@link RWorker.RObject} class.\r\n * @returns {ProxyConstructor} A proxy to the R object subclass corresponding to\r\n * the given value of the `objType` argument.\r\n * @typeParam T The type of the {@link RWorker.RObject} class to be proxied.\r\n * @typeParam R The type to be returned from the proxied class constructor.\r\n */\r\nexport function newRClassProxy<T, R>(\r\n  chan: ChannelMain,\r\n  shelter: ShelterID,\r\n  objType: RType | RCtor\r\n) {\r\n  return new Proxy(RWorker.RObject, {\r\n    construct: (_, args: WebRData[]) => newRObject(chan, objType, shelter, ...args),\r\n    get: (_, prop: string | number | symbol) => {\r\n      return targetMethod(chan, prop.toString());\r\n    },\r\n  }) as unknown as ProxyConstructor<T, R>;\r\n}\r\n", "import { IN_NODE } from './compat';\r\nimport { WebR, WebROptions } from './webr-main';\r\n\r\nexport interface ConsoleCallbacks {\r\n  stdout?: (line: string) => void;\r\n  stderr?: (line: string) => void;\r\n  prompt?: (line: string) => void;\r\n  canvasImage?: (image: ImageBitmap) => void;\r\n  canvasNewPage?: () => void;\r\n}\r\n\r\n/**\r\n * Text-based Interactive Console for WebR\r\n *\r\n * A helper application to assist in creating an interactive R REPL based on\r\n * JavaScript callbacks.\r\n *\r\n * Callback functions ``stdout`` and ``stderr`` are called with a single line\r\n * of output as the first argument. The default implementation of `stdout` and\r\n * `stderr` writes to the console using `console.log` and `console.error`.\r\n *\r\n * R code can be sent as input by calling the ``stdin`` method with a single\r\n * line of textual input.\r\n *\r\n * A long running R computation can be interrupted by calling the `interrupt`\r\n * method.\r\n *\r\n * The ``prompt`` callback function is called when webR produces a prompt at\r\n * the REPL console and is therefore awaiting user input. The prompt character\r\n * (usually ``>`` or ``+``) is given as the first argument to the callback\r\n * function. The default implementation of `prompt` shows a JavaScript prompt\r\n * asking the user for input, and then sends the user input to `stdin`.\r\n *\r\n * The ``canvasImage`` callback function is called when webR writes plots to\r\n * the built-in HTML canvas graphics device.\r\n *\r\n * The ``canvasNewPage`` callback function is called when webR creates a new\r\n * plot.\r\n *\r\n * Once constructed, start the Console using the ``run`` method. The `run`\r\n * method starts an asynchronous infinite loop that waits for output from the\r\n * webR worker and then calls the relevant callbacks.\r\n */\r\nexport class Console {\r\n  /** The supporting instance of webR */\r\n  webR: WebR;\r\n  /**\r\n   * A HTML canvas element\r\n   *\r\n   * The canvas graphics device writes to this element by default. Undefined\r\n   * when HTML canvas is unsupported.\r\n   */\r\n  canvas: HTMLCanvasElement | undefined;\r\n  /** Called when webR outputs to ``stdout`` */\r\n  #stdout: (line: string) => void;\r\n  /** Called when webR outputs to ``stderr`` */\r\n  #stderr: (line: string) => void;\r\n  /** Called when webR prompts for input */\r\n  #prompt: (line: string) => void;\r\n  /** Called when webR writes to the HTML canvas element */\r\n  #canvasImage: (image: ImageBitmap) => void;\r\n  /** Called when webR creates a new plot */\r\n  #canvasNewPage: () => void;\r\n\r\n  /**\r\n   * @param {ConsoleCallbacks} callbacks A list of webR Console callbacks to\r\n   * be used for this console.\r\n   * @param {WebROptions} options The options to use for the new instance of\r\n   * webR started to support this console.\r\n   */\r\n  constructor(\r\n    callbacks: ConsoleCallbacks = {},\r\n    options: WebROptions = {\r\n      REnv: {\r\n        R_HOME: '/usr/lib/R',\r\n        FONTCONFIG_PATH: '/etc/fonts',\r\n        R_ENABLE_JIT: '0',\r\n      },\r\n    }\r\n  ) {\r\n    this.webR = new WebR(options);\r\n    if (!IN_NODE) {\r\n      this.canvas = document.createElement('canvas');\r\n      this.canvas.setAttribute('width', '1008');\r\n      this.canvas.setAttribute('height', '1008');\r\n    }\r\n    this.#stdout = callbacks.stdout || this.#defaultStdout;\r\n    this.#stderr = callbacks.stderr || this.#defaultStderr;\r\n    this.#prompt = callbacks.prompt || this.#defaultPrompt;\r\n    this.#canvasImage = callbacks.canvasImage || this.#defaultCanvasImage;\r\n    this.#canvasNewPage = callbacks.canvasNewPage || this.#defaultCanvasNewPage;\r\n    void this.webR.evalRVoid('options(device=webr::canvas)');\r\n  }\r\n\r\n  /**\r\n   * Write a line of input to webR's REPL through ``stdin``\r\n   * @param {string} input A line of input text.\r\n   */\r\n  stdin(input: string) {\r\n    this.webR.writeConsole(input);\r\n  }\r\n\r\n  /**\r\n   * Interrupt a long running R computation and return to the prompt\r\n   */\r\n  interrupt() {\r\n    this.webR.interrupt();\r\n  }\r\n\r\n  /**\r\n   * The default function called when webR outputs to ``stdout``\r\n   * @param {string} text The line sent to stdout by webR.\r\n   */\r\n  #defaultStdout = (text: string) => {\r\n    console.log(text);\r\n  };\r\n\r\n  /**\r\n   * The default function called when webR outputs to ``stderr``\r\n   * @param {string} text The line sent to stderr by webR.\r\n   */\r\n  #defaultStderr = (text: string) => {\r\n    console.error(text);\r\n  };\r\n\r\n  /**\r\n   * The default function called when webR writes out a prompt\r\n   * @param {string} text The text content of the prompt.\r\n   */\r\n  #defaultPrompt = (text: string) => {\r\n    const input = prompt(text);\r\n    if (input) this.stdin(`${input}\\n`);\r\n  };\r\n\r\n  /**\r\n   * The default function called when webR writes to HTML canvas\r\n   * @param {ImageBitmap} image An ImageBitmap containing the image data.\r\n   */\r\n  #defaultCanvasImage = (image: ImageBitmap) => {\r\n    if (IN_NODE) {\r\n      throw new Error('Plotting with HTML canvas is not yet supported under Node');\r\n    }\r\n    this.canvas!.getContext('2d')!.drawImage(image, 0, 0);\r\n  };\r\n\r\n  /**\r\n   * The default function called when webR creates a new plot\r\n   */\r\n  #defaultCanvasNewPage = () => {\r\n    if (IN_NODE) {\r\n      throw new Error('Plotting with HTML canvas is not yet supported under Node');\r\n    }\r\n    this.canvas!.getContext('2d')!.clearRect(0, 0, this.canvas!.width, this.canvas!.height);\r\n  };\r\n\r\n  /**\r\n   * Start the webR console\r\n   */\r\n  run() {\r\n    void this.#run();\r\n  }\r\n\r\n  /*\r\n   * Start the asynchronous infinite loop\r\n   *\r\n   * This loop waits for output from webR and dispatches callbacks based on the\r\n   * message received.\r\n   *\r\n   * The promise returned by this asynchronous function resolves only once the\r\n   * webR communication channel has closed.\r\n   */\r\n  async #run() {\r\n    for (; ;) {\r\n      const output = await this.webR.read();\r\n      switch (output.type) {\r\n        case 'stdout':\r\n          this.#stdout(output.data as string);\r\n          break;\r\n        case 'stderr':\r\n          this.#stderr(output.data as string);\r\n          break;\r\n        case 'prompt':\r\n          this.#prompt(output.data as string);\r\n          break;\r\n        case 'canvas':\r\n          if (output.data.event === 'canvasImage') {\r\n            this.#canvasImage(output.data.image as ImageBitmap);\r\n          } else if (output.data.event === 'canvasNewPage') {\r\n            this.#canvasNewPage();\r\n          }\r\n          break;\r\n        case 'closed':\r\n          return;\r\n        default:\r\n          console.warn(`Unhandled output type for webR Console: ${output.type}.`);\r\n      }\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * The webR JavaScript API.\r\n * @module WebR\r\n */\r\n\r\nimport { ChannelMain } from './chan/channel';\r\nimport { newChannelMain, ChannelType } from './chan/channel-common';\r\nimport { Message } from './chan/message';\r\nimport { BASE_URL, PKG_BASE_URL, WEBR_VERSION } from './config';\r\nimport { EmPtr } from './emscripten';\r\nimport { WebRPayloadPtr } from './payload';\r\nimport { newRProxy, newRClassProxy } from './proxy';\r\nimport { isRObject, RCharacter, RComplex, RDouble } from './robj-main';\r\nimport { REnvironment, RSymbol, RInteger, RList, RDataFrame } from './robj-main';\r\nimport { RLogical, RNull, RObject, RPairlist, RRaw, RString, RCall } from './robj-main';\r\nimport { replaceInObject } from './utils';\r\nimport * as RWorker from './robj-worker';\r\nimport { WebRError, WebRPayloadError } from './error';\r\n\r\nimport {\r\n  CaptureRMessage,\r\n  EvalRMessage,\r\n  EvalRMessageOutputType,\r\n  EvalRMessageRaw,\r\n  EvalROptions,\r\n  FSMessage,\r\n  FSMountMessage,\r\n  FSSyncfsMessage,\r\n  FSReadFileMessage,\r\n  FSWriteFileMessage,\r\n  InstallPackagesOptions,\r\n  InvokeWasmFunctionMessage,\r\n  NewShelterMessage,\r\n  ShelterDestroyMessage,\r\n  ShelterMessage,\r\n  FSRenameMessage,\r\n  FSAnalyzePathMessage,\r\n} from './webr-chan';\r\n\r\nexport { Console, ConsoleCallbacks } from './console';\r\nexport * from './robj-main';\r\nexport * from './error';\r\nexport * from './webr-chan';\r\nexport { ChannelType } from './chan/channel-common';\r\n\r\n/**\r\n * The webR FS API for interacting with the Emscripten Virtual File System.\r\n */\r\nexport interface WebRFS {\r\n  /**\r\n   * Lookup information about a file or directory node in the Emscripten\r\n   * virtual file system.\r\n   * @param {string} path Path to the requested node.\r\n   * @returns {Promise<FSNode>} The requested node.\r\n   */\r\n  lookupPath: (path: string) => Promise<FSNode>;\r\n  /**\r\n   * Create a directory on the Emscripten virtual file system.\r\n   * @param {string} path Path of the directory to create.\r\n   * @returns {Promise<FSNode>} The newly created directory node.\r\n   */\r\n  mkdir: (path: string) => Promise<FSNode>;\r\n  /**\r\n   * Get the content of a file on the Emscripten virtual file system.\r\n   * @param {string} path Path of the file to read.\r\n   * @param {string} [flags] Open the file with the specified flags.\r\n   * @returns {Promise<Uint8Array>} The content of the requested file.\r\n   */\r\n  readFile: (path: string, flags?: string) => Promise<Uint8Array>;\r\n  /**\r\n   * Remove a directory on the Emscripten virtual file system.\r\n   * @param {string} path Path of the directory to remove.\r\n   */\r\n  rmdir: (path: string) => Promise<void>;\r\n  /**\r\n   * Write a new file to the Emscripten virtual file system.\r\n   * @param {string} path Path of the new file.\r\n   * @param {Uint8Array} data The content of the new file.\r\n   * @param {string} [flags] Open the file with the specified flags.\r\n   */\r\n  writeFile: (path: string, data: ArrayBufferView, flags?: string) => Promise<void>;\r\n  /**\r\n   * Unlink a node on the Emscripten virtual file system. If that node was the\r\n   * last link to a file it is is deleted.\r\n   * @param {string} path Path of the target node.\r\n   */\r\n  unlink: (path: string) => Promise<void>;\r\n}\r\n\r\n/** A filesystem entry in the Emscripten Virtual File System */\r\nexport type FSNode = {\r\n  id: number;\r\n  name: string;\r\n  mode: number;\r\n  isFolder: boolean;\r\n  contents?: { [key: string]: FSNode };\r\n  mounted: null | {\r\n    mountpoint: string;\r\n    root: FSNode;\r\n  }\r\n};\r\n\r\n/** An Emscripten Filesystem type */\r\nexport type FSType = 'NODEFS' | 'WORKERFS' | 'IDBFS' | 'DRIVEFS';\r\n\r\n/**\r\n * Configuration settings to be used when mounting Filesystem objects with\r\n * Emscripten\r\n */\r\nexport type FSMountOptions<T extends FSType = FSType> =\r\n  T extends 'DRIVEFS' ? { driveName?: string; browsingContextId?: string } :\r\n  T extends 'NODEFS' ? { root: string } : {\r\n    blobs?: Array<{ name: string, data: Blob | ArrayBufferLike }>;\r\n    files?: Array<File | FileList>;\r\n    packages?: Array<{ metadata: FSMetaData, blob: Blob | ArrayBufferLike }>;\r\n  };\r\n\r\n/**\r\n * Emscripten filesystem image metadata\r\n */\r\nexport type FSMetaData = {\r\n  files: {\r\n    filename: string;\r\n    start: number;\r\n    end: number;\r\n  }[],\r\n  gzip?: boolean;\r\n};\r\n\r\n/** Emscripten filesystem entry information, as given by `FS.analyzePath()` */\r\nexport type FSAnalyzeInfo = {\r\n  isRoot: boolean,\r\n  exists: boolean,\r\n  error: Error,\r\n  name: string,\r\n  path: string,\r\n  object?: FSNode,\r\n  parentExists: boolean,\r\n  parentPath: string,\r\n  parentObject?: FSNode,\r\n};\r\n\r\n/**\r\n * The configuration settings to be used when starting webR.\r\n */\r\nexport interface WebROptions {\r\n  /**\r\n   * Command line arguments to be passed to R.\r\n   * Default: `[]`.\r\n   */\r\n  RArgs?: string[];\r\n\r\n  /**\r\n   * Environment variables to be made available for the R process.\r\n   * Default: `{ R_HOME: '/usr/lib/R', R_ENABLE_JIT: 0 }`.\r\n   */\r\n  REnv?: { [key: string]: string };\r\n\r\n  /**\r\n   * The base URL used for downloading R WebAssembly binaries.\r\n   *  Default: `'https://webr.r-wasm.org/[version]/'`\r\n   */\r\n  baseUrl?: string;\r\n\r\n  /**\r\n   * The repo URL to use when downloading R WebAssembly packages.\r\n   * Default: `'https://repo.r-wasm.org/`\r\n   */\r\n  repoUrl?: string;\r\n\r\n  /**\r\n   * The base URL from where to load JavaScript worker scripts when loading\r\n   * webR with the ServiceWorker communication channel mode.\r\n   * Default: `''`\r\n   */\r\n  serviceWorkerUrl?: string;\r\n\r\n  /**\r\n   * The WebAssembly user's home directory and initial working directory.\r\n   * Default: `'/home/web_user'`\r\n   */\r\n  homedir?: string;\r\n\r\n  /**\r\n   * Start R in interactive mode?\r\n   * Default: `true`.\r\n   */\r\n  interactive?: boolean;\r\n\r\n  /**\r\n   * Set the communication channel type to be used.\r\n   * Default: `channelType.Automatic`\r\n   */\r\n  channelType?: (typeof ChannelType)[keyof typeof ChannelType];\r\n\r\n  /**\r\n   * Create the lazy virtual filesystem entries before starting R?\r\n   * Default: `true`.\r\n   */\r\n  createLazyFilesystem?: boolean;\r\n}\r\n\r\nconst defaultEnv = {\r\n  FONTCONFIG_PATH: '/etc/fonts',\r\n  R_HOME: '/usr/lib/R',\r\n  R_ENABLE_JIT: '0',\r\n  WEBR: '1',\r\n  WEBR_VERSION: WEBR_VERSION,\r\n};\r\n\r\nconst defaultOptions = {\r\n  RArgs: [],\r\n  REnv: defaultEnv,\r\n  baseUrl: BASE_URL,\r\n  serviceWorkerUrl: '',\r\n  repoUrl: PKG_BASE_URL,\r\n  homedir: '/home/web_user',\r\n  interactive: true,\r\n  channelType: ChannelType.Automatic,\r\n  createLazyFilesystem: true,\r\n};\r\n\r\n/**\r\n * The webR class is used to initialize and interact with the webR system.\r\n *\r\n * Start webR by constructing an instance of the WebR class, optionally passing\r\n * an options argument of type {@link WebROptions}. WebR will begin to download\r\n * and start a version of R built for WebAssembly in a worker thread.\r\n */\r\nexport class WebR {\r\n  #chan: ChannelMain;\r\n  #initialised: Promise<unknown>;\r\n  globalShelter!: Shelter;\r\n  version: string = WEBR_VERSION;\r\n\r\n  RObject!: ReturnType<typeof newRClassProxy<typeof RWorker.RObject, RObject>>;\r\n  RLogical!: ReturnType<typeof newRClassProxy<typeof RWorker.RLogical, RLogical>>;\r\n  RInteger!: ReturnType<typeof newRClassProxy<typeof RWorker.RInteger, RInteger>>;\r\n  RDouble!: ReturnType<typeof newRClassProxy<typeof RWorker.RDouble, RDouble>>;\r\n  RCharacter!: ReturnType<typeof newRClassProxy<typeof RWorker.RCharacter, RCharacter>>;\r\n  RComplex!: ReturnType<typeof newRClassProxy<typeof RWorker.RComplex, RComplex>>;\r\n  RRaw!: ReturnType<typeof newRClassProxy<typeof RWorker.RRaw, RRaw>>;\r\n  RList!: ReturnType<typeof newRClassProxy<typeof RWorker.RList, RList>>;\r\n  RDataFrame!: ReturnType<typeof newRClassProxy<typeof RWorker.RDataFrame, RDataFrame>>;\r\n  RPairlist!: ReturnType<typeof newRClassProxy<typeof RWorker.RPairlist, RPairlist>>;\r\n  REnvironment!: ReturnType<typeof newRClassProxy<typeof RWorker.REnvironment, REnvironment>>;\r\n  RSymbol!: ReturnType<typeof newRClassProxy<typeof RWorker.RSymbol, RSymbol>>;\r\n  RString!: ReturnType<typeof newRClassProxy<typeof RWorker.RString, RString>>;\r\n  RCall!: ReturnType<typeof newRClassProxy<typeof RWorker.RCall, RCall>>;\r\n\r\n  objs: {\r\n    baseEnv: REnvironment;\r\n    globalEnv: REnvironment;\r\n    null: RNull;\r\n    true: RLogical;\r\n    false: RLogical;\r\n    na: RLogical;\r\n  };\r\n\r\n  Shelter;\r\n\r\n  constructor(options: WebROptions = {}) {\r\n    const config: Required<WebROptions> = {\r\n      ...defaultOptions,\r\n      ...options,\r\n      REnv: {\r\n        ...defaultOptions.REnv,\r\n        ...options.REnv,\r\n      }\r\n    };\r\n    this.#chan = newChannelMain(config);\r\n\r\n    this.objs = {} as typeof this.objs;\r\n    this.Shelter = newShelterProxy(this.#chan);\r\n\r\n    this.#initialised = this.#chan.initialised.then(async () => {\r\n      this.globalShelter = await new this.Shelter();\r\n\r\n      this.RObject = this.globalShelter.RObject;\r\n      this.RLogical = this.globalShelter.RLogical;\r\n      this.RInteger = this.globalShelter.RInteger;\r\n      this.RDouble = this.globalShelter.RDouble;\r\n      this.RComplex = this.globalShelter.RComplex;\r\n      this.RCharacter = this.globalShelter.RCharacter;\r\n      this.RRaw = this.globalShelter.RRaw;\r\n      this.RList = this.globalShelter.RList;\r\n      this.RDataFrame = this.globalShelter.RDataFrame;\r\n      this.RPairlist = this.globalShelter.RPairlist;\r\n      this.REnvironment = this.globalShelter.REnvironment;\r\n      this.RSymbol = this.globalShelter.RSymbol;\r\n      this.RString = this.globalShelter.RString;\r\n      this.RCall = this.globalShelter.RCall;\r\n\r\n      this.objs = {\r\n        baseEnv: (await this.RObject.getPersistentObject('baseEnv')) as REnvironment,\r\n        globalEnv: (await this.RObject.getPersistentObject('globalEnv')) as REnvironment,\r\n        null: (await this.RObject.getPersistentObject('null')) as RNull,\r\n        true: (await this.RObject.getPersistentObject('true')) as RLogical,\r\n        false: (await this.RObject.getPersistentObject('false')) as RLogical,\r\n        na: (await this.RObject.getPersistentObject('na')) as RLogical,\r\n      };\r\n\r\n      void this.#handleSystemMessages();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @returns {Promise<void>} A promise that resolves once webR has been\r\n   * initialised.\r\n   */\r\n  async init() {\r\n    return this.#initialised;\r\n  }\r\n\r\n  async #handleSystemMessages() {\r\n    for (; ;) {\r\n      const msg = await this.#chan.readSystem();\r\n      switch (msg.type) {\r\n        case 'setTimeoutWasm':\r\n          /* Handle messages requesting a delayed invocation of a wasm function.\r\n          * TODO: Reimplement without using the main thread once it is possible\r\n          *       to yield in the worker thread.\r\n          */\r\n          setTimeout(\r\n            (ptr: EmPtr, args: number[]) => {\r\n              void this.invokeWasmFunction(ptr, ...args);\r\n            },\r\n            msg.data.delay as number,\r\n            msg.data.ptr,\r\n            msg.data.args\r\n          );\r\n          break;\r\n        case 'console.log':\r\n          console.log(msg.data);\r\n          break;\r\n        case 'console.warn':\r\n          console.warn(msg.data);\r\n          break;\r\n        case 'console.error':\r\n          console.error(msg.data);\r\n          break;\r\n        case 'close':\r\n          this.#chan.close();\r\n          break;\r\n        default:\r\n          throw new WebRError('Unknown system message type `' + msg.type + '`');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close the communication channel between the main thread and the worker\r\n   * thread cleanly. Once this has been executed, webR will be unable to\r\n   * continue.\r\n   */\r\n  close() {\r\n    this.#chan.close();\r\n  }\r\n\r\n  /**\r\n   * Read from the communication channel and return an output message.\r\n   * @returns {Promise<Message>} The output message\r\n   */\r\n  async read(): Promise<Message> {\r\n    return await this.#chan.read();\r\n  }\r\n\r\n  /**\r\n   * Stream output messages from the communication channel via an async generator.\r\n   * @yields {Promise<Message>} Output messages from the communication channel.\r\n   */\r\n  async *stream(): AsyncGenerator<Message, void> {\r\n    for (;;) {\r\n      const output = await this.#chan.read();\r\n      if (output.type === 'closed') {\r\n        return;\r\n      }\r\n      yield output;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush the output queue in the communication channel and return all output\r\n   * messages.\r\n   * @returns {Promise<Message[]>} The output messages\r\n   */\r\n  async flush(): Promise<Message[]> {\r\n    return await this.#chan.flush();\r\n  }\r\n\r\n  /**\r\n   * Send a message to the communication channel input queue.\r\n   * @param {Message} msg Message to be added to the input queue.\r\n   */\r\n  write(msg: Message) {\r\n    this.#chan.write(msg);\r\n  }\r\n\r\n  /**\r\n   * Send a line of standard input to the communication channel input queue.\r\n   * @param {string} input Message to be added to the input queue.\r\n   */\r\n  writeConsole(input: string) {\r\n    this.write({ type: 'stdin', data: input + '\\n' });\r\n  }\r\n\r\n  /** Attempt to interrupt a running R computation. */\r\n  interrupt() {\r\n    this.#chan.interrupt();\r\n  }\r\n\r\n  /**\r\n   * Install a list of R packages from Wasm binary package repositories.\r\n   * @param {string | string[]} packages An string or array of strings\r\n   *   containing R package names.\r\n   * @param {InstallPackagesOptions} [options] Options to be used when\r\n   *   installing webR packages.\r\n   */\r\n  async installPackages(packages: string | string[], options?: InstallPackagesOptions) {\r\n    const op = Object.assign({\r\n      quiet: false,\r\n      mount: true\r\n    }, options);\r\n\r\n    const msg = { type: 'installPackages', data: { name: packages, options: op } };\r\n    await this.#chan.request(msg);\r\n  }\r\n\r\n  /**\r\n   * Destroy an R object reference.\r\n   * @param {RObject} x An R object reference.\r\n   */\r\n  async destroy(x: RObject) {\r\n    await this.globalShelter.destroy(x);\r\n  }\r\n\r\n  /**\r\n   * Evaluate the given R code.\r\n   *\r\n   * Stream outputs and any conditions raised during execution are written to\r\n   * the JavaScript console.\r\n   * @param {string} code The R code to evaluate.\r\n   * @param {EvalROptions} [options] Options for the execution environment.\r\n   * @returns {Promise<RObject>} The result of the computation.\r\n   */\r\n  async evalR(code: string, options?: EvalROptions): Promise<RObject> {\r\n    return this.globalShelter.evalR(code, options);\r\n  }\r\n\r\n  async evalRVoid(code: string, options?: EvalROptions) {\r\n    return this.evalRRaw(code, 'void', options);\r\n  }\r\n\r\n  async evalRBoolean(code: string, options?: EvalROptions) {\r\n    return this.evalRRaw(code, 'boolean', options);\r\n  }\r\n\r\n  async evalRNumber(code: string, options?: EvalROptions) {\r\n    return this.evalRRaw(code, 'number', options);\r\n  }\r\n\r\n  async evalRString(code: string, options?: EvalROptions) {\r\n    return this.evalRRaw(code, 'string', options);\r\n  }\r\n\r\n  /**\r\n   * Evaluate the given R code, returning the result as a raw JavaScript object.\r\n   * @param {string} code The R code to evaluate.\r\n   * @param {EvalRMessageOutputType} outputType JavaScript type to return the result as.\r\n   * @param {EvalROptions} [options] Options for the execution environment.\r\n   * @returns {Promise<unknown>} The result of the computation.\r\n   */\r\n  async evalRRaw(code: string, outputType: 'void', options?: EvalROptions): Promise<void>;\r\n  async evalRRaw(code: string, outputType: 'boolean', options?: EvalROptions): Promise<boolean>;\r\n  async evalRRaw(code: string, outputType: 'boolean[]', options?: EvalROptions): Promise<boolean[]>;\r\n  async evalRRaw(code: string, outputType: 'number', options?: EvalROptions): Promise<number>;\r\n  async evalRRaw(code: string, outputType: 'number[]', options?: EvalROptions): Promise<number[]>;\r\n  async evalRRaw(code: string, outputType: 'string', options?: EvalROptions): Promise<string>;\r\n  async evalRRaw(code: string, outputType: 'string[]', options?: EvalROptions): Promise<string[]>;\r\n  async evalRRaw(code: string, outputType: EvalRMessageOutputType, options: EvalROptions = {}) {\r\n    const opts = replaceInObject(options, isRObject, (obj: RObject) => obj._payload);\r\n    const msg: EvalRMessageRaw = {\r\n      type: 'evalRRaw',\r\n      data: { code: code, options: opts as EvalROptions, outputType: outputType },\r\n    };\r\n    const payload = await this.#chan.request(msg);\r\n\r\n    switch (payload.payloadType) {\r\n      case 'raw':\r\n        return payload.obj;\r\n      case 'ptr':\r\n        throw new WebRPayloadError('Unexpected ptr payload type returned from evalRVoid');\r\n    }\r\n  }\r\n\r\n  async invokeWasmFunction(ptr: EmPtr, ...args: number[]): Promise<EmPtr> {\r\n    const msg = {\r\n      type: 'invokeWasmFunction',\r\n      data: { ptr, args },\r\n    } as InvokeWasmFunctionMessage;\r\n    const resp = await this.#chan.request(msg);\r\n    return resp.obj as EmPtr;\r\n  }\r\n\r\n  FS = {\r\n    analyzePath: async (path: string, dontResolveLastLink?: boolean): Promise<FSAnalyzeInfo> => {\r\n      const msg: FSAnalyzePathMessage = { type: 'analyzePath', data: { path, dontResolveLastLink } };\r\n      const payload = await this.#chan.request(msg);\r\n      return payload.obj as FSAnalyzeInfo;\r\n    },\r\n    lookupPath: async (path: string): Promise<FSNode> => {\r\n      const msg: FSMessage = { type: 'lookupPath', data: { path } };\r\n      const payload = await this.#chan.request(msg);\r\n      return payload.obj as FSNode;\r\n    },\r\n    mkdir: async (path: string): Promise<FSNode> => {\r\n      const msg: FSMessage = { type: 'mkdir', data: { path } };\r\n      const payload = await this.#chan.request(msg);\r\n      return payload.obj as FSNode;\r\n    },\r\n    mount: async <T extends FSType>(\r\n      type: T,\r\n      options: FSMountOptions<T>,\r\n      mountpoint: string\r\n    ): Promise<void> => {\r\n      // Convert blobs to ArrayBuffer for transfer over the communication channel\r\n      // FIXME: Use a replacer + reviver to transfer `Blob`s\r\n      let promises: Promise<void>[] = [];\r\n      if ('blobs' in options && options.blobs) {\r\n        promises = [...promises, ...options.blobs.map((item) => {\r\n          if (item.data instanceof Blob) {\r\n            return item.data.arrayBuffer().then((data) => {\r\n              item.data = new Uint8Array(data);\r\n            });\r\n          } else {\r\n            return Promise.resolve();\r\n          }\r\n        })];\r\n      }\r\n      if ('packages' in options && options.packages) {\r\n        promises = [...promises, ...options.packages.map((pkg) => {\r\n          if (pkg.blob instanceof Blob) {\r\n            return pkg.blob.arrayBuffer().then((data) => {\r\n              pkg.blob = new Uint8Array(data);\r\n            });\r\n          } else {\r\n            return Promise.resolve();\r\n          }\r\n        })];\r\n      }\r\n      await Promise.all(promises);\r\n\r\n      const msg: FSMountMessage = { type: 'mount', data: { type, options, mountpoint } };\r\n      await this.#chan.request(msg);\r\n    },\r\n    syncfs: async (populate: boolean): Promise<void> => {\r\n      const msg: FSSyncfsMessage = { type: 'syncfs', data: { populate } };\r\n      await this.#chan.request(msg);\r\n    },\r\n    readFile: async (path: string, flags?: string): Promise<Uint8Array> => {\r\n      const msg: FSReadFileMessage = { type: 'readFile', data: { path, flags } };\r\n      const payload = await this.#chan.request(msg);\r\n      return payload.obj as Uint8Array;\r\n    },\r\n    rename: async (oldpath: string, newpath: string): Promise<void> => {\r\n      const msg: FSRenameMessage = { type: 'rename', data: { oldpath, newpath } };\r\n      await this.#chan.request(msg);\r\n    },\r\n    rmdir: async (path: string): Promise<void> => {\r\n      const msg: FSMessage = { type: 'rmdir', data: { path } };\r\n      await this.#chan.request(msg);\r\n    },\r\n    writeFile: async (path: string, data: ArrayBufferView, flags?: string): Promise<void> => {\r\n      const msg: FSWriteFileMessage = { type: 'writeFile', data: { path, data, flags } };\r\n      await this.#chan.request(msg);\r\n    },\r\n    unlink: async (path: string): Promise<void> => {\r\n      const msg: FSMessage = { type: 'unlink', data: { path } };\r\n      await this.#chan.request(msg);\r\n    },\r\n    unmount: async (mountpoint: string): Promise<void> => {\r\n      const msg: FSMessage = { type: 'unmount', data: { path: mountpoint } };\r\n      await this.#chan.request(msg);\r\n    },\r\n  };\r\n}\r\n\r\n/** WebR shelters provide fine-grained control over the lifetime of R objects. */\r\nexport class Shelter {\r\n  #id = '';\r\n  #chan: ChannelMain;\r\n  #initialised = false;\r\n\r\n  RObject!: ReturnType<typeof newRClassProxy<typeof RWorker.RObject, RObject>>;\r\n  RLogical!: ReturnType<typeof newRClassProxy<typeof RWorker.RLogical, RLogical>>;\r\n  RInteger!: ReturnType<typeof newRClassProxy<typeof RWorker.RInteger, RInteger>>;\r\n  RDouble!: ReturnType<typeof newRClassProxy<typeof RWorker.RDouble, RDouble>>;\r\n  RCharacter!: ReturnType<typeof newRClassProxy<typeof RWorker.RCharacter, RCharacter>>;\r\n  RComplex!: ReturnType<typeof newRClassProxy<typeof RWorker.RComplex, RComplex>>;\r\n  RRaw!: ReturnType<typeof newRClassProxy<typeof RWorker.RRaw, RRaw>>;\r\n  RList!: ReturnType<typeof newRClassProxy<typeof RWorker.RList, RList>>;\r\n  RDataFrame!: ReturnType<typeof newRClassProxy<typeof RWorker.RDataFrame, RDataFrame>>;\r\n  RPairlist!: ReturnType<typeof newRClassProxy<typeof RWorker.RPairlist, RPairlist>>;\r\n  REnvironment!: ReturnType<typeof newRClassProxy<typeof RWorker.REnvironment, REnvironment>>;\r\n  RSymbol!: ReturnType<typeof newRClassProxy<typeof RWorker.RSymbol, RSymbol>>;\r\n  RString!: ReturnType<typeof newRClassProxy<typeof RWorker.RString, RString>>;\r\n  RCall!: ReturnType<typeof newRClassProxy<typeof RWorker.RCall, RCall>>;\r\n\r\n  /** @internal */\r\n  constructor(chan: ChannelMain) {\r\n    this.#chan = chan;\r\n  }\r\n\r\n  /** @internal */\r\n  async init() {\r\n    if (this.#initialised) {\r\n      return;\r\n    }\r\n\r\n    const msg = { type: 'newShelter' } as NewShelterMessage;\r\n    const payload = await this.#chan.request(msg);\r\n    this.#id = payload.obj as string;\r\n\r\n    this.RObject = newRClassProxy<typeof RWorker.RObject, RObject>(this.#chan, this.#id, 'object');\r\n    this.RLogical = newRClassProxy<typeof RWorker.RLogical, RLogical>(this.#chan, this.#id, 'logical');\r\n    this.RInteger = newRClassProxy<typeof RWorker.RInteger, RInteger>(this.#chan, this.#id, 'integer');\r\n    this.RDouble = newRClassProxy<typeof RWorker.RDouble, RDouble>(this.#chan, this.#id, 'double');\r\n    this.RComplex = newRClassProxy<typeof RWorker.RComplex, RComplex>(this.#chan, this.#id, 'complex');\r\n    this.RCharacter = newRClassProxy<typeof RWorker.RCharacter, RCharacter>(this.#chan, this.#id, 'character');\r\n    this.RRaw = newRClassProxy<typeof RWorker.RRaw, RRaw>(this.#chan, this.#id, 'raw');\r\n    this.RList = newRClassProxy<typeof RWorker.RList, RList>(this.#chan, this.#id, 'list');\r\n    this.RDataFrame = newRClassProxy<typeof RWorker.RDataFrame, RDataFrame>(this.#chan, this.#id, 'dataframe');\r\n    this.RPairlist = newRClassProxy<typeof RWorker.RPairlist, RPairlist>(this.#chan, this.#id, 'pairlist');\r\n    this.REnvironment = newRClassProxy<typeof RWorker.REnvironment, REnvironment>(this.#chan, this.#id, 'environment');\r\n    this.RSymbol = newRClassProxy<typeof RWorker.RSymbol, RSymbol>(this.#chan, this.#id, 'symbol');\r\n    this.RString = newRClassProxy<typeof RWorker.RString, RString>(this.#chan, this.#id, 'string');\r\n    this.RCall = newRClassProxy<typeof RWorker.RCall, RCall>(this.#chan, this.#id, 'call');\r\n\r\n    this.#initialised = true;\r\n  }\r\n\r\n  async purge() {\r\n    const msg: ShelterMessage = {\r\n      type: 'shelterPurge',\r\n      data: this.#id,\r\n    };\r\n    await this.#chan.request(msg);\r\n  }\r\n\r\n  async destroy(x: RObject) {\r\n    const msg: ShelterDestroyMessage = {\r\n      type: 'shelterDestroy',\r\n      data: { id: this.#id, obj: x._payload },\r\n    };\r\n    await this.#chan.request(msg);\r\n  }\r\n\r\n  async size(): Promise<number> {\r\n    const msg: ShelterMessage = {\r\n      type: 'shelterSize',\r\n      data: this.#id,\r\n    };\r\n    const payload = await this.#chan.request(msg);\r\n    return payload.obj as number;\r\n  }\r\n\r\n  /**\r\n   * Evaluate the given R code.\r\n   *\r\n   * Stream outputs and any conditions raised during execution are written to\r\n   * the JavaScript console. The returned R object is protected by the shelter.\r\n   * @param {string} code The R code to evaluate.\r\n   * @param {EvalROptions} [options] Options for the execution environment.\r\n   * @returns {Promise<RObject>} The result of the computation.\r\n   */\r\n  async evalR(code: string, options: EvalROptions = {}): Promise<RObject> {\r\n    const opts = replaceInObject(options, isRObject, (obj: RObject) => obj._payload);\r\n    const msg: EvalRMessage = {\r\n      type: 'evalR',\r\n      data: { code: code, options: opts as EvalROptions, shelter: this.#id },\r\n    };\r\n    const payload = await this.#chan.request(msg);\r\n\r\n    switch (payload.payloadType) {\r\n      case 'raw':\r\n        throw new WebRPayloadError('Unexpected payload type returned from evalR');\r\n      default:\r\n        return newRProxy(this.#chan, payload);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate the given R code, capturing output.\r\n   *\r\n   * Stream outputs and conditions raised during execution are captured and\r\n   * returned as part of the output of this function. Returned R objects are\r\n   * protected by the shelter.\r\n   * @param {string} code The R code to evaluate.\r\n   * @param {EvalROptions} [options] Options for the execution environment.\r\n   * @returns {Promise<{\r\n   *   result: RObject,\r\n   *   output: { type: string; data: any }[],\r\n   *   images: ImageBitmap[]\r\n   * }>} An object containing the result of the computation, an array of output,\r\n   *   and an array of captured plots.\r\n   */\r\n  async captureR(code: string, options: EvalROptions = {}): Promise<{\r\n    result: RObject;\r\n    output: { type: string; data: any }[];\r\n    images: ImageBitmap[];\r\n  }> {\r\n    const opts = replaceInObject(options, isRObject, (obj: RObject) => obj._payload);\r\n    const msg: CaptureRMessage = {\r\n      type: 'captureR',\r\n      data: {\r\n        code: code,\r\n        options: opts as EvalROptions,\r\n        shelter: this.#id,\r\n      },\r\n    };\r\n    const payload = await this.#chan.request(msg);\r\n\r\n    switch (payload.payloadType) {\r\n      case 'ptr':\r\n        throw new WebRPayloadError('Unexpected payload type returned from evalR');\r\n\r\n      case 'raw': {\r\n        const data = payload.obj as {\r\n          result: WebRPayloadPtr;\r\n          output: { type: string; data: any }[];\r\n          images: ImageBitmap[];\r\n        };\r\n        const result = newRProxy(this.#chan, data.result);\r\n        const output = data.output;\r\n        const images = data.images;\r\n\r\n        for (let i = 0; i < output.length; ++i) {\r\n          if (output[i].type !== 'stdout' && output[i].type !== 'stderr') {\r\n            output[i].data = newRProxy(this.#chan, output[i].data as WebRPayloadPtr);\r\n          }\r\n        }\r\n\r\n        return { result, output, images };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction newShelterProxy(chan: ChannelMain) {\r\n  return new Proxy(Shelter, {\r\n    construct: async () => {\r\n      const out = new Shelter(chan);\r\n      await out.init();\r\n      return out;\r\n    },\r\n  }) as unknown as {\r\n    new(): Promise<Shelter>;\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": ["encode", "encode", "encoder", "decoder", "decoder", "Module", "Module", "Module", "Module", "Module", "objs", "_newSetter", "handleEventsFromWorker_fn", "_onMessageFromWorker", "handleEventsFromWorker_fn", "_onMessageFromWorker", "isRObject", "isRObject", "chan", "_a", "isRObject", "_chan", "_initialised"]
}
